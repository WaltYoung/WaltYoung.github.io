<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WaltYoung</title>
  
  <subtitle>个人博客</subtitle>
  <link href="https://waltyoung.github.io/atom.xml" rel="self"/>
  
  <link href="https://waltyoung.github.io/"/>
  <updated>2023-11-07T12:50:40.778Z</updated>
  <id>https://waltyoung.github.io/</id>
  
  <author>
    <name>WaltYoung</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>文件头文件尾总结</title>
    <link href="https://waltyoung.github.io/2023/11/07/%E6%96%87%E4%BB%B6%E5%A4%B4%E6%96%87%E4%BB%B6%E5%B0%BE%E6%80%BB%E7%BB%93/"/>
    <id>https://waltyoung.github.io/2023/11/07/%E6%96%87%E4%BB%B6%E5%A4%B4%E6%96%87%E4%BB%B6%E5%B0%BE%E6%80%BB%E7%BB%93/</id>
    <published>2023-11-07T12:49:29.000Z</published>
    <updated>2023-11-07T12:50:40.778Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="文件头文件尾总结"><a href="#文件头文件尾总结" class="headerlink" title="文件头文件尾总结"></a>文件头文件尾总结</h1><table><thead><tr><th>文件类型</th><th>文件头</th><th>文件尾</th></tr></thead><tbody><tr><td>JPEG (jpg)</td><td>FF D8 FF</td><td>FF D9</td></tr><tr><td>PNG (png)</td><td>89 50 4E 47</td><td>AE 42 60 82</td></tr><tr><td>GIF (gif)</td><td>47 49 46 38</td><td>00 3B</td></tr><tr><td>ZIP Archive (zip)</td><td>50 4B 03 04</td><td>50 4B</td></tr><tr><td>TIFF (tif)</td><td>49 49 2A 00</td><td></td></tr><tr><td>Windows Bitmap (bmp)</td><td>42 4D</td><td></td></tr><tr><td>CAD (dwg)</td><td>41 43 31 30</td><td></td></tr><tr><td>Adobe Photoshop (psd)</td><td>38 42 50 53</td><td></td></tr><tr><td>Rich Text Format (rtf)</td><td>7B 5C 72 74</td><td></td></tr><tr><td>XML (xml)</td><td>3C 3F 78 6D</td><td></td></tr><tr><td>HTML (html)</td><td>68 74 6D 6C</td><td>3E</td></tr><tr><td>Email [thorough only] (eml)</td><td>44 65 6C 69 76 65 72 79 2D 64 61 74 65 3A</td><td></td></tr><tr><td>Outlook Express (dbx)</td><td>CF AD 12 FE C5 FD 74 6F</td><td></td></tr><tr><td>Outlook (pst)</td><td>21 42 44 4E</td><td></td></tr><tr><td>MS Word&#x2F;Excel (xls.or.doc)</td><td>D0 CF 11 E0</td><td></td></tr><tr><td>MS Access (mdb)</td><td>53 74 61 6E  64 61 72 64 20 4A</td><td></td></tr><tr><td>WordPerfect (wpd)</td><td>FF 57 50 43</td><td></td></tr><tr><td>Adobe Acrobat (pdf)</td><td>25 50 44 46  2D 31 2E</td><td></td></tr><tr><td>Quicken (qdf)</td><td>AC 9E BD 8F</td><td></td></tr><tr><td>Windows Password (pwl)</td><td>E3 82 85 96</td><td></td></tr><tr><td>RAR Archive (rar)</td><td>52 61 72 21</td><td></td></tr><tr><td>Wave (wav)</td><td>57 41 56 45</td><td></td></tr><tr><td>AVI (avi)</td><td>41 56 49 20</td><td></td></tr><tr><td>Real Audio (ram)</td><td>2E 72 61 FD</td><td></td></tr><tr><td>Real Media (rm)</td><td>2E 52 4D 46</td><td></td></tr><tr><td>MPEG (mpg)</td><td>00 00 01 BA</td><td></td></tr><tr><td>MPEG (mpg)</td><td>00 00 01 B3</td><td></td></tr><tr><td>Quicktime (mov)</td><td>6D 6F 6F 76</td><td></td></tr><tr><td>Windows Media (asf)</td><td>30 26 B2 75  8E 66 CF 11</td><td></td></tr><tr><td>MIDI (mid)</td><td>4D 54 68 64</td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://waltyoung.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Python反编译之exe文件反编译</title>
    <link href="https://waltyoung.github.io/2023/11/06/Python%E5%8F%8D%E7%BC%96%E8%AF%91%E4%B9%8Bexe%E6%96%87%E4%BB%B6%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    <id>https://waltyoung.github.io/2023/11/06/Python%E5%8F%8D%E7%BC%96%E8%AF%91%E4%B9%8Bexe%E6%96%87%E4%BB%B6%E5%8F%8D%E7%BC%96%E8%AF%91/</id>
    <published>2023-11-06T00:27:27.000Z</published>
    <updated>2023-11-06T00:28:46.615Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Python反编译之exe文件反编译"><a href="#Python反编译之exe文件反编译" class="headerlink" title="Python反编译之exe文件反编译"></a>Python反编译之exe文件反编译</h1><p>在学习反编译之前，先学习编译</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p><code>pyinstaller</code>是一个第三方库，支持 Python 2.7 和 Python 3.3+。可以在 Windows、Mac OS X和Linux上使用，但不跨平台，即编译为.exe文件，需要在 Windows系统上进行；编译为mac app，需要在Mac OS上进行。</p><p>安装方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyinstaller</span><br></pre></td></tr></table></figure><p>编译产生单个的可执行文件，在生成的<code>dist</code>文件夹中可以找到<code>.exe</code>文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F -w 文件名.py</span><br></pre></td></tr></table></figure><p>参数解释：</p><ul><li>-F 产生单个的可执行文件</li><li>-w 指定程序运行时不显示命令行窗口（仅对 Windows 有效)</li></ul><p>其他参数或选项在使用到时再作补充</p><p><strong>注</strong>：（可能存在的问题）</p><p>1、可执行文件过大<em>（比如输出<code>helloworld</code>的程序占用2G）</em></p><p>原因：利用 PyInstaller 对指定的代码进行解释时，会保存所有的依赖项，包括 import引用的库和Python解析器。</p><p>解决方法：在引用包时，尽量使用<code>from ... import ...</code>语句，而不是直接使用<code>import</code>导入整个库</p><p>2、双击可执行文件一闪而过</p><p>原因：程序设计者没有编写GUI</p><p>解决方法：如下有3种方法</p><ol><li>在程序末尾使用<code>input()</code>函数捕捉输入，主动输入以结束程序</li><li>在命令行下运行<code>.exe</code>文件</li><li>导入<code>os</code>模块，在程序末尾添加<code>os.system(&quot;pause&quot;)</code>来防止控制台关闭</li></ol><h2 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h2><p>工具：<code>uncompyle6</code></p><p>安装方法：直接下载<a href="https://sourceforge.net/projects/pyinstallerextractor/" title="pyinstxtractor.py 工具的下载地址">https://sourceforge.net/projects/pyinstallerextractor/</a></p><p>命令：**(需要把<code>pyinstxtractor.py</code>和<code>.exe</code>文件置于同一目录)**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pyinstxtractor.py 文件名.exe</span><br></pre></td></tr></table></figure><p>命令执行后可以发现一个名为<code>文件名.exe_extracted</code>的文件夹，在其中可以发现与<code>.exe</code>文件同名的<code>pyc</code>文件。</p><p>经过该方法生成的<code>pyc</code>文件是没有<code>Magic Number</code>的，需要根据本地的Python版本自行补全</p><p>因为笔者本地的Python版本是<code>Python 3.9.13</code>，故只有<code>Python 1.5</code>至<code>Python 3.9.13</code>的<code>Magic Number</code>。在<code>C:\Users\86159\AppData\Local\Programs\Python\Python39\Lib\importlib\_bootstrap_external.py</code>该路径下可以得到本地的Python版本已有<code>Magic Number</code>。读者需要自行替换为Python解释器所在的路径。</p><p><code>Magic Number</code>表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">Known values:</span><br><span class="line"> Python 1.5:   20121</span><br><span class="line"> Python 1.5.1: 20121</span><br><span class="line">    Python 1.5.2: 20121</span><br><span class="line">    Python 1.6:   50428</span><br><span class="line">    Python 2.0:   50823</span><br><span class="line">    Python 2.0.1: 50823</span><br><span class="line">    Python 2.1:   60202</span><br><span class="line">    Python 2.1.1: 60202</span><br><span class="line">    Python 2.1.2: 60202</span><br><span class="line">    Python 2.2:   60717</span><br><span class="line">    Python 2.3a0: 62011</span><br><span class="line">    Python 2.3a0: 62021</span><br><span class="line">    Python 2.3a0: 62011 (!)</span><br><span class="line">    Python 2.4a0: 62041</span><br><span class="line">    Python 2.4a3: 62051</span><br><span class="line">    Python 2.4b1: 62061</span><br><span class="line">    Python 2.5a0: 62071</span><br><span class="line">    Python 2.5a0: 62081 (ast-branch)</span><br><span class="line">    Python 2.5a0: 62091 (with)</span><br><span class="line">    Python 2.5a0: 62092 (changed WITH_CLEANUP opcode)</span><br><span class="line">    Python 2.5b3: 62101 (fix wrong code: for x, in ...)</span><br><span class="line">    Python 2.5b3: 62111 (fix wrong code: x += yield)</span><br><span class="line">    Python 2.5c1: 62121 (fix wrong lnotab with for loops and</span><br><span class="line">                         storing constants that should have been removed)</span><br><span class="line">    Python 2.5c2: 62131 (fix wrong code: for x, in ... in listcomp/genexp)</span><br><span class="line">    Python 2.6a0: 62151 (peephole optimizations and STORE_MAP opcode)</span><br><span class="line">    Python 2.6a1: 62161 (WITH_CLEANUP optimization)</span><br><span class="line">    Python 2.7a0: 62171 (optimize list comprehensions/change LIST_APPEND)</span><br><span class="line">    Python 2.7a0: 62181 (optimize conditional branches:</span><br><span class="line">                         introduce POP_JUMP_IF_FALSE and POP_JUMP_IF_TRUE)</span><br><span class="line">    Python 2.7a0  62191 (introduce SETUP_WITH)</span><br><span class="line">    Python 2.7a0  62201 (introduce BUILD_SET)</span><br><span class="line">    Python 2.7a0  62211 (introduce MAP_ADD and SET_ADD)</span><br><span class="line">    Python 3000:   3000</span><br><span class="line">                   3010 (removed UNARY_CONVERT)</span><br><span class="line">                   3020 (added BUILD_SET)</span><br><span class="line">                   3030 (added keyword-only parameters)</span><br><span class="line">                   3040 (added signature annotations)</span><br><span class="line">                   3050 (print becomes a function)</span><br><span class="line">                   3060 (PEP 3115 metaclass syntax)</span><br><span class="line">                   3061 (string literals become unicode)</span><br><span class="line">                   3071 (PEP 3109 raise changes)</span><br><span class="line">                   3081 (PEP 3137 make __file__ and __name__ unicode)</span><br><span class="line">                   3091 (kill str8 interning)</span><br><span class="line">                   3101 (merge from 2.6a0, see 62151)</span><br><span class="line">                   3103 (__file__ points to source file)</span><br><span class="line">    Python 3.0a4: 3111 (WITH_CLEANUP optimization).</span><br><span class="line">    Python 3.0b1: 3131 (lexical exception stacking, including POP_EXCEPT</span><br><span class="line">                          3021)</span><br><span class="line">    Python 3.1a1: 3141 (optimize list, set and dict comprehensions:</span><br><span class="line">                        change LIST_APPEND and SET_ADD, add MAP_ADD #2183)</span><br><span class="line">    Python 3.1a1: 3151 (optimize conditional branches:</span><br><span class="line">                        introduce POP_JUMP_IF_FALSE and POP_JUMP_IF_TRUE</span><br><span class="line">                          4715)</span><br><span class="line">    Python 3.2a1: 3160 (add SETUP_WITH #6101)</span><br><span class="line">                  tag: cpython-32</span><br><span class="line">    Python 3.2a2: 3170 (add DUP_TOP_TWO, remove DUP_TOPX and ROT_FOUR #9225)</span><br><span class="line">                  tag: cpython-32</span><br><span class="line">    Python 3.2a3  3180 (add DELETE_DEREF #4617)</span><br><span class="line">    Python 3.3a1  3190 (__class__ super closure changed)</span><br><span class="line">    Python 3.3a1  3200 (PEP 3155 __qualname__ added #13448)</span><br><span class="line">    Python 3.3a1  3210 (added size modulo 2**32 to the pyc header #13645)</span><br><span class="line">    Python 3.3a2  3220 (changed PEP 380 implementation #14230)</span><br><span class="line">    Python 3.3a4  3230 (revert changes to implicit __class__ closure #14857)</span><br><span class="line">    Python 3.4a1  3250 (evaluate positional default arguments before</span><br><span class="line">                       keyword-only defaults #16967)</span><br><span class="line">    Python 3.4a1  3260 (add LOAD_CLASSDEREF; allow locals of class to override</span><br><span class="line">                       free vars #17853)</span><br><span class="line">    Python 3.4a1  3270 (various tweaks to the __class__ closure #12370)</span><br><span class="line">    Python 3.4a1  3280 (remove implicit class argument)</span><br><span class="line">    Python 3.4a4  3290 (changes to __qualname__ computation #19301)</span><br><span class="line">    Python 3.4a4  3300 (more changes to __qualname__ computation #19301)</span><br><span class="line">    Python 3.4rc2 3310 (alter __qualname__ computation #20625)</span><br><span class="line">    Python 3.5a1  3320 (PEP 465: Matrix multiplication operator #21176)</span><br><span class="line">    Python 3.5b1  3330 (PEP 448: Additional Unpacking Generalizations #2292)</span><br><span class="line">    Python 3.5b2  3340 (fix dictionary display evaluation order #11205)</span><br><span class="line">    Python 3.5b3  3350 (add GET_YIELD_FROM_ITER opcode #24400)</span><br><span class="line">    Python 3.5.2  3351 (fix BUILD_MAP_UNPACK_WITH_CALL opcode #27286)</span><br><span class="line">    Python 3.6a0  3360 (add FORMAT_VALUE opcode #25483)</span><br><span class="line">    Python 3.6a1  3361 (lineno delta of code.co_lnotab becomes signed #26107)</span><br><span class="line">    Python 3.6a2  3370 (16 bit wordcode #26647)</span><br><span class="line">    Python 3.6a2  3371 (add BUILD_CONST_KEY_MAP opcode #27140)</span><br><span class="line">    Python 3.6a2  3372 (MAKE_FUNCTION simplification, remove MAKE_CLOSURE</span><br><span class="line">                        #27095)</span><br><span class="line">    Python 3.6b1  3373 (add BUILD_STRING opcode #27078)</span><br><span class="line">    Python 3.6b1  3375 (add SETUP_ANNOTATIONS and STORE_ANNOTATION opcodes</span><br><span class="line">                        #27985)</span><br><span class="line">    Python 3.6b1  3376 (simplify CALL_FUNCTIONs &amp; BUILD_MAP_UNPACK_WITH_CALL</span><br><span class="line">                          27213)</span><br><span class="line">    Python 3.6b1  3377 (set __class__ cell from type.__new__ #23722)</span><br><span class="line">    Python 3.6b2  3378 (add BUILD_TUPLE_UNPACK_WITH_CALL #28257)</span><br><span class="line">    Python 3.6rc1 3379 (more thorough __class__ validation #23722)</span><br><span class="line">    Python 3.7a1  3390 (add LOAD_METHOD and CALL_METHOD opcodes #26110)</span><br><span class="line">    Python 3.7a2  3391 (update GET_AITER #31709)</span><br><span class="line">    Python 3.7a4  3392 (PEP 552: Deterministic pycs #31650)</span><br><span class="line">    Python 3.7b1  3393 (remove STORE_ANNOTATION opcode #32550)</span><br><span class="line">    Python 3.7b5  3394 (restored docstring as the first stmt in the body;</span><br><span class="line">                        this might affected the first line number #32911)</span><br><span class="line">    Python 3.8a1  3400 (move frame block handling to compiler #17611)</span><br><span class="line">    Python 3.8a1  3401 (add END_ASYNC_FOR #33041)</span><br><span class="line">    Python 3.8a1  3410 (PEP570 Python Positional-Only Parameters #36540)</span><br><span class="line">    Python 3.8b2  3411 (Reverse evaluation order of key: value in dict</span><br><span class="line">                        comprehensions #35224)</span><br><span class="line">    Python 3.8b2  3412 (Swap the position of positional args and positional</span><br><span class="line">                        only args in ast.arguments #37593)</span><br><span class="line">    Python 3.8b4  3413 (Fix &quot;break&quot; and &quot;continue&quot; in &quot;finally&quot; #37830)</span><br><span class="line">    Python 3.9a0  3420 (add LOAD_ASSERTION_ERROR #34880)</span><br><span class="line">    Python 3.9a0  3421 (simplified bytecode for with blocks #32949)</span><br><span class="line">    Python 3.9a0  3422 (remove BEGIN_FINALLY, END_FINALLY, CALL_FINALLY, POP_FINALLY bytecodes #33387)</span><br><span class="line">    Python 3.9a2  3423 (add IS_OP, CONTAINS_OP and JUMP_IF_NOT_EXC_MATCH bytecodes #39156)</span><br><span class="line">    Python 3.9a2  3424 (simplify bytecodes for *value unpacking)</span><br><span class="line">    Python 3.9a2  3425 (simplify bytecodes for **value unpacking)</span><br></pre></td></tr></table></figure><p><strong>pyc文件结构</strong></p><p>注：不同的版本的<code>Magic Number</code>都在 Python&#x2F;import.c 内定义</p><ul><li>Python3.7及以上版本中，头部包含4字节的<code>Magic Number</code>、4字节的空位、4字节的时间戳以及4字节的文件大小信息</li><li>Python3.3 至 Python3.7版本中，头部包含4字节的<code>Magic Number</code>、4字节的时间戳以及4字节的文件大小信息</li><li>Python3.3 以下的版本中，头部包含4字节的<code>Magic Number</code>、4字节的时间戳</li></ul><p>其后是序列化的<code>PyCodeObject</code>(此结构在<code>Include/code.h</code>内定义)，序列化方法在 <code>Python/marshal.c</code>内定义</p><p>参考链接：<a href="https://kdr2.com/tech/python/pyc-format.html" title="PYC文件格式分析">https://kdr2.com/tech/python/pyc-format.html</a></p><p>以本地的Python版本为例，下图是4字节的<code>Magic Number</code>和4字节的空位</p><p><img src="https://s2.loli.net/2023/11/05/HeEofzFrwnGS1KY.png" alt="PYC文件说明_1.png"></p><p>下图是4字节的时间戳和4字节的文件大小信息</p><p><img src="https://s2.loli.net/2023/11/05/uOReJbP52n1vEdM.png" alt="PYC文件说明_2.png"></p><p><strong>在<code>Magic Number</code>、空位、时间戳以及文件大小信息中，后三者对文件反编译没有影响，全部填充0即可。</strong>而因为小端序和 Python 版本的原因，<code>Magic Number</code>时常只需要修改第一个字节即可。如某Python 3.8版本的<code>Magic Number</code>是<code>0A0D0D61</code>，笔者本地的Python 3.9版本的<code>Magic Number</code>是<code>0A0D0D55</code>。</p><p>接下来就是反编译Python的字节码文件（pyc文件）</p><p>关于<strong>pyc文件反编译</strong>更多的信息，请阅读笔者的另一篇笔记<a href="https://waltyoung.github.io/2023/11/05/Python%E5%8F%8D%E7%BC%96%E8%AF%91%E4%B9%8Bpyc%E6%96%87%E4%BB%B6%E5%8F%8D%E7%BC%96%E8%AF%91/" title="Python反编译之pyc文件反编译">https://waltyoung.github.io/2023/11/05/Python%E5%8F%8D%E7%BC%96%E8%AF%91%E4%B9%8Bpyc%E6%96%87%E4%BB%B6%E5%8F%8D%E7%BC%96%E8%AF%91/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://waltyoung.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://waltyoung.github.io/tags/Reverse/"/>
    
    <category term="Python" scheme="https://waltyoung.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python反编译之pyc文件反编译</title>
    <link href="https://waltyoung.github.io/2023/11/05/Python%E5%8F%8D%E7%BC%96%E8%AF%91%E4%B9%8Bpyc%E6%96%87%E4%BB%B6%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    <id>https://waltyoung.github.io/2023/11/05/Python%E5%8F%8D%E7%BC%96%E8%AF%91%E4%B9%8Bpyc%E6%96%87%E4%BB%B6%E5%8F%8D%E7%BC%96%E8%AF%91/</id>
    <published>2023-11-05T13:42:12.000Z</published>
    <updated>2023-11-05T13:43:40.711Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Python反编译之pyc文件反编译"><a href="#Python反编译之pyc文件反编译" class="headerlink" title="Python反编译之pyc文件反编译"></a>Python反编译之pyc文件反编译</h1><p>笔者在做CTF逆向题时遇到了<code>pyc</code>文件，IDA无法处理，遂有了此文</p><h2 id="pyc文件简介"><a href="#pyc文件简介" class="headerlink" title="pyc文件简介"></a>pyc文件简介</h2><p>python文件在被import运行的时候会在同目录下编译一个pyc的文件（为了下次快速加载），这个文件可以和py文件一样使用，但无法阅读和修改。<strong>pyc是一种二进制文件</strong>，是由py文件经过编译后，生成的<strong>可执行的字节码文件</strong>。pyc文件是可以跨平台部署的，类似<strong>Java的<code>.class</code>文件</strong>。</p><h2 id="编译生成pyc文件"><a href="#编译生成pyc文件" class="headerlink" title="编译生成pyc文件"></a>编译生成pyc文件</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>编译时使用<code>-m py_compile</code>选项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m py_compile test.py</span><br></pre></td></tr></table></figure><p>使用<code>-O</code>选项，可以将<code>.pyc</code>文件优化为<code>.pyo</code>文件<em>（体积更小）</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -O -m py_compile test.py</span><br></pre></td></tr></table></figure><h3 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h3><p>使用代码编译生成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> py_compile</span><br><span class="line">py_compile.<span class="built_in">compile</span>(<span class="string">r&#x27;test.py&#x27;</span>) </span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://blog.csdn.net/qq_33957603/article/details/126929263" title="逆向工程：Python反编译工具的一点介绍（如何还原pyc文件）">https://blog.csdn.net/qq_33957603&#x2F;article&#x2F;details&#x2F;126929263</a></p><h2 id="pyc文件结构"><a href="#pyc文件结构" class="headerlink" title="pyc文件结构"></a>pyc文件结构</h2><p>注：不同的版本的<code>Magic Number</code>都在 Python&#x2F;import.c 内定义</p><ul><li>Python3.7及以上版本中，头部包含4字节的<code>Magic Number</code>、4字节的空位、4字节的时间戳以及4字节的文件大小信息，后者对文件反编译没有影响，全部填充0即可</li><li>Python3.3 至 Python3.7版本中，头部包含4字节的<code>Magic Number</code>、4字节的时间戳以及4字节的文件大小信息</li><li>Python3.3 以下的版本中，头部包含4字节的<code>Magic Number</code>、4字节的时间戳</li></ul><p>其后是序列化的<code>PyCodeObject</code>(此结构在<code>Include/code.h</code>内定义)，序列化方法在 <code>Python/marshal.c</code>内定义</p><p>参考链接：<a href="https://kdr2.com/tech/python/pyc-format.html" title="PYC文件格式分析">https://kdr2.com/tech/python/pyc-format.html</a></p><p>以本地的Python版本为例，下图是4字节的<code>Magic Number</code>和4字节的空位</p><p><img src="https://s2.loli.net/2023/11/05/HeEofzFrwnGS1KY.png" alt="PYC文件说明_1.png"></p><p>下图是4字节的时间戳和4字节的文件大小信息</p><p><img src="https://s2.loli.net/2023/11/05/uOReJbP52n1vEdM.png" alt="PYC文件说明_2.png"></p><h2 id="逆向方法"><a href="#逆向方法" class="headerlink" title="逆向方法"></a>逆向方法</h2><h3 id="方法一-2"><a href="#方法一-2" class="headerlink" title="方法一"></a>方法一</h3><p>工具：<code>pycdc</code></p><p><strong>pycdc 用于 Python 3.9及更高版本</strong></p><p>安装方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git</span><br><span class="line">sudo apt install cmake</span><br><span class="line">git clone https://github.com/zrax/pycdc.git</span><br><span class="line"></span><br><span class="line">cd pycdc</span><br><span class="line">cmake .</span><br><span class="line">make #编译pycdc工具</span><br></pre></td></tr></table></figure><p>Windows下的参考链接：<a href="https://blog.csdn.net/qq_63585949/article/details/127080253" title="Python 反编译：pycdc工具的使用">https://blog.csdn.net/qq_63585949&#x2F;article&#x2F;details&#x2F;127080253</a></p><p>命令：**(需要把<code>pycdc.exe</code>和<code>.pyc</code>文件置于同一目录)**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./pycdc.exe 文件名.pyc &gt; 文件名.py</span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>工具：<code>uncompyle6</code></p><p><strong>uncompyle6 现仅适用于 Python 2.4 到 3.8 版本</strong></p><p>安装方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install uncompyle6</span><br></pre></td></tr></table></figure><p>命令：<em>（选项和参数不可调换位置）</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uncompyle6 -o 文件名.py 文件名.pyc</span><br></pre></td></tr></table></figure><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>pyc文件反编译网站<a href="https://tool.lu/pyc/">https://tool.lu/pyc/</a>，适合接入互联网的情况</p><h2 id="实战案例"><a href="#实战案例" class="headerlink" title="实战案例"></a>实战案例</h2><p>工具：<code>pycdc</code></p><p>以第六届浙江省大学生网络与信息安全竞赛预赛的<code>pyccc</code>题为例</p><p>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./pycdc.exe baby.pyc</span><br></pre></td></tr></table></figure><p>执行结果如图所示</p><p><img src="https://s2.loli.net/2023/11/05/K5okTMDaOJFdU3Y.png" alt="pyccc.png"></p><p>此Python代码较为简单，不逐行解释，直接给出 write up</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">102</span>,<span class="number">109</span>,<span class="number">99</span>,<span class="number">100</span>,<span class="number">127</span>,<span class="number">52</span>,<span class="number">114</span>,<span class="number">88</span>,<span class="number">97</span>,<span class="number">122</span>,<span class="number">85</span>,<span class="number">125</span>,<span class="number">105</span>,<span class="number">127</span>,<span class="number">119</span>,<span class="number">80</span>,<span class="number">120</span>,<span class="number">112</span>,<span class="number">98</span>,<span class="number">39</span>,<span class="number">109</span>,<span class="number">52</span>,<span class="number">55</span>,<span class="number">106</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(a[i] ^ i),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>此Python的write up代码较为简单，不逐行解释。仅在此备注，便于记忆：</p><ul><li><code>chr()</code>函数是<code>character</code>的缩写</li><li><code>ord()</code>函数是<code>ordinal</code>的缩写</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://waltyoung.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://waltyoung.github.io/tags/Reverse/"/>
    
    <category term="Python" scheme="https://waltyoung.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>CTF-Misc-swp</title>
    <link href="https://waltyoung.github.io/2023/11/04/CTF-Misc-swp/"/>
    <id>https://waltyoung.github.io/2023/11/04/CTF-Misc-swp/</id>
    <published>2023-11-04T03:57:57.000Z</published>
    <updated>2023-11-04T04:00:57.292Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="CTF-Misc-swp"><a href="#CTF-Misc-swp" class="headerlink" title="CTF-Misc-swp"></a>CTF-Misc-swp</h1><p>原题链接：<a href="https://buuoj.cn/challenges#[ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020]swp" title="[ACTF新生赛2020]swp">https://buuoj.cn/challenges#[ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020]swp</a></p><p>解压压缩包，得到<code>wget.pcapng</code></p><blockquote><p><strong>pcapng文件</strong><br>PCAPNG全名Packet CAPture Next Generation，是一种现阶段广泛使用的网络数据包保存格式，其前身为PCAP。二者都可以用<code>Wireshark</code>打开。这里不对<code>pcapng</code>和<code>pcap</code>的具体文件格式展开详细了解、介绍。之后如果需要深入，会再作补充。</p></blockquote><p>通过文件名，我们可以猜测这是关于<code>wget</code>的网络数据包文件。<code>wget</code>支持HTTP、HTTPS以及FTP协议。所以选择导出文件。具体操作如下图所示</p><p><img src="https://s2.loli.net/2023/11/04/MP7VHZnLojKwX3A.png" alt="导出HTTP数据包.png"></p><p>在弹出的页面中可以观察到可疑文件<code>secret.zip</code>，选中并点击保存</p><p><img src="https://s2.loli.net/2023/11/04/knx35vIcJUNWHBC.png" alt="保存secret.zip文件.png"></p><p>解压得到的<code>secret.zip</code>，得到<code>flag</code>文件和<code>.flag.swp</code>文件。<code>swp</code>文件是Linux的交换文件。将<code>.flag.swp</code>文件拖入十六进制查看器中可见flag</p><p><img src="https://s2.loli.net/2023/11/04/qhega2IJzKoPGxO.png" alt="swp文件内容.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://waltyoung.github.io/tags/CTF/"/>
    
    <category term="Misc" scheme="https://waltyoung.github.io/tags/Misc/"/>
    
    <category term="Linux" scheme="https://waltyoung.github.io/tags/Linux/"/>
    
    <category term="Wireshark" scheme="https://waltyoung.github.io/tags/Wireshark/"/>
    
  </entry>
  
  <entry>
    <title>PAT-Longest Symmetric String</title>
    <link href="https://waltyoung.github.io/2023/11/01/PAT-Longest-Symmetric-String/"/>
    <id>https://waltyoung.github.io/2023/11/01/PAT-Longest-Symmetric-String/</id>
    <published>2023-11-01T08:13:24.000Z</published>
    <updated>2023-11-01T08:14:23.658Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="PAT-Longest-Symmetric-String"><a href="#PAT-Longest-Symmetric-String" class="headerlink" title="PAT-Longest Symmetric String"></a>PAT-Longest Symmetric String</h1><p>原题链接:<a href="https://www.nowcoder.com/pat/5/problem/4027" title="Longest Symmetric String">https://www.nowcoder.com/pat/5/problem/4027</a></p><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><strong>题目描述</strong></p><blockquote><p>Given a string, you are supposed to output the length of the longest symmetric sub-string. For example, given “Is PAT&amp;TAP symmetric?”, the longest symmetric sub-string is “s PAT&amp;TAP s”, hence you must output 11.</p></blockquote><p><strong>输入描述</strong></p><blockquote><p>Each input file contains one test case which gives a non-empty string of length no more than 1000.</p></blockquote><p><strong>输出描述</strong></p><blockquote><p>For each test case, simply print the maximum length in a line.</p></blockquote><p><strong>输入例子</strong></p><blockquote><p>Is PAT&amp;TAP symmetric?</p></blockquote><p><strong>输出例子</strong></p><blockquote><p>11</p></blockquote><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><p><strong>题目难度</strong></p><p>简单</p><p><strong>解题算法</strong></p><p>DP（动态规划）</p><p><strong>我的代码</strong>（无注释版）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="built_in">getline</span>(cin,s);</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">length</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i][i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(i &lt;= s.<span class="built_in">length</span>()<span class="number">-1</span> &amp;&amp; s[i] == s[i+<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][i+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">            ans=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> L = <span class="number">3</span>; L &lt;= s.<span class="built_in">length</span>(); L++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i + L - <span class="number">1</span>&lt; s.<span class="built_in">length</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = i + L - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == s[j] &amp;&amp; dp[i+<span class="number">1</span>][j<span class="number">-1</span>] == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j]=<span class="number">1</span>;</span><br><span class="line">                ans=L;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>部分代码解释</strong></p><p><code>dp[1010][1010]</code>数组是全局变量，会被默认初始化为全0，不需要使用<code>memset</code>函数初始化</p><p>使用<code>getline(cin,s);</code>以读入字符串，而不是<code>cin &gt;&gt; s;</code>，因为输入字符串中可能包含空格</p><p>第一个for语句初始化长度为1和2的子串</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">length</span>();i++)<span class="comment">//初始化长度为1和2的子串</span></span><br><span class="line">&#123;</span><br><span class="line">    dp[i][i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(i &lt;= s.<span class="built_in">length</span>()<span class="number">-1</span> &amp;&amp; s[i] == s[i+<span class="number">1</span>])<span class="comment">//为了避免数组越界，`i &lt;= s.length()-1`必须先判断</span></span><br><span class="line">    &#123;</span><br><span class="line">        dp[i][i+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        ans=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个for语句</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> L = <span class="number">3</span>; L &lt;= s.<span class="built_in">length</span>(); L++)<span class="comment">//控制子串长度</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i + L - <span class="number">1</span>&lt; s.<span class="built_in">length</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = i + L - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == s[j] &amp;&amp; dp[i+<span class="number">1</span>][j<span class="number">-1</span>] == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][j]=<span class="number">1</span>;</span><br><span class="line">            ans=L;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="C/C++" scheme="https://waltyoung.github.io/tags/C-C/"/>
    
    <category term="PAT" scheme="https://waltyoung.github.io/tags/PAT/"/>
    
    <category term="DP" scheme="https://waltyoung.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>PAT-Dating</title>
    <link href="https://waltyoung.github.io/2023/10/31/PAT-Dating/"/>
    <id>https://waltyoung.github.io/2023/10/31/PAT-Dating/</id>
    <published>2023-10-31T12:16:01.000Z</published>
    <updated>2023-10-31T12:21:41.642Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="PAT-Dating"><a href="#PAT-Dating" class="headerlink" title="PAT-Dating"></a>PAT-Dating</h1><p>原题链接:<a href="https://www.nowcoder.com/pat/5/problem/4028" title="Dating">https://www.nowcoder.com/pat/5/problem/4028</a></p><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><strong>题目描述</strong></p><blockquote><p>Sherlock Holmes received a note with some strange strings: “Let’s date! 3485djDkxh4hhGE 2984akDfkkkkggEdsb s&amp;hgsfdk d&amp;Hyscvnm”. It took him only a minute to figure out that those strange strings are actually referring to the coded time “Thursday 14:04” – since the first common capital English letter (case sensitive) shared by the first two strings is the 4th capital letter ‘D’, representing the 4th day in a week; the second common character is the 5th capital letter ‘E’, representing the 14th hour (hence the hours from 0 to 23 in a day are represented by the numbers from 0 to 9 and the capital letters from A to N, respectively); and the English letter shared by the last two strings is ‘s’ at the 4th position, representing the 4th minute. Now given two pairs of strings,<br>you are supposed to help Sherlock decode the dating time.</p></blockquote><p><strong>输入描述</strong></p><blockquote><p>Each input file contains one test case. Each case gives 4 non-empty strings of no more than 60 characters without white space in 4 lines.</p></blockquote><p><strong>输出描述</strong></p><blockquote><p>For each test case, print the decoded time in one line, in the format “DAY HH:MM”, where “DAY” is a 3-character abbreviation for the days in a week – that is, “MON” for Monday, “TUE” for Tuesday, “WED” for Wednesday, “THU” for Thursday, “FRI” for Friday, “SAT” for Saturday, and “SUN” for Sunday. It is guaranteed that the result is unique for each case.</p></blockquote><p><strong>输入例子</strong></p><blockquote><p>3485djDkxh4hhGE<br>2984akDfkkkkggEdsb<br>s&amp;hgsfdk<br>d&amp;Hyscvnm</p></blockquote><p><strong>输出例子</strong></p><blockquote><p>THU 14:04</p></blockquote><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><p><strong>题目难度</strong></p><p>简单</p><p><strong>解题算法</strong></p><p>字符串查找</p><p><strong>我的代码</strong>（无注释版）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string week[]=&#123;<span class="string">&quot;MON&quot;</span>,<span class="string">&quot;TUE&quot;</span>,<span class="string">&quot;WED&quot;</span>,<span class="string">&quot;THU&quot;</span>, <span class="string">&quot;FRI&quot;</span>, <span class="string">&quot;SAT&quot;</span>,<span class="string">&quot;SUN&quot;</span>&#125;;</span><br><span class="line">string day=<span class="string">&quot;0123456789ABCDEFGHIJKLMN&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s1,s2,s3,s4;</span><br><span class="line">    cin &gt;&gt; s1 &gt;&gt; s2 &gt;&gt; s3 &gt;&gt; s4;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>,j = <span class="number">1</span>; i &lt; <span class="built_in">min</span>(s1.<span class="built_in">length</span>(),s2.<span class="built_in">length</span>()); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( s1[i] == s2[i] &amp;&amp; <span class="built_in">isalnum</span>( s1[i] ) )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span> (j)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span>( <span class="built_in">isalpha</span>( s1[i] ) )</span><br><span class="line">                &#123;</span><br><span class="line">                    cout &lt;&lt; week[ s1[i] % <span class="string">&#x27;A&#x27;</span> ];</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; %02u:&quot;</span>,day.<span class="built_in">find</span>( s1[i] ) );</span><br><span class="line">                j++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j == <span class="number">3</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">min</span>(s3.<span class="built_in">length</span>(),s4.<span class="built_in">length</span>()); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( s3[i] == s4[i] &amp;&amp; <span class="built_in">isalpha</span>( s3[i] ) )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%02d\n&quot;</span>,i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此题较为简单，旨在复习<strong>字符串的函数</strong>。例如：<code>.length()</code>返回字符串长度；<code>.find( &#39;A&#39; )</code>返回一个无符号整型数表示<code>A</code>在字符串中的位置；在输出字符串中的单个字符时，使用<code>%c</code>，如<code>printf(&quot;%c\n&quot;,str[i]);</code>，又如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; week[ s1[i] % <span class="string">&#x27;A&#x27;</span> ];<span class="comment">//不能使用printf(&quot;%s&quot;,week[ s1[i] % &#x27;A&#x27; ]);</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="C/C++" scheme="https://waltyoung.github.io/tags/C-C/"/>
    
    <category term="PAT" scheme="https://waltyoung.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT-Mooncake</title>
    <link href="https://waltyoung.github.io/2023/10/28/PAT-Mooncake/"/>
    <id>https://waltyoung.github.io/2023/10/28/PAT-Mooncake/</id>
    <published>2023-10-28T09:51:37.000Z</published>
    <updated>2023-10-28T11:33:29.100Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="PAT-Mooncake"><a href="#PAT-Mooncake" class="headerlink" title="PAT-Mooncake"></a>PAT-Mooncake</h1><p>原题链接:<a href="https://www.nowcoder.com/pat/5/problem/4031" title="Mooncake">https://www.nowcoder.com/pat/5/problem/4031</a></p><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><strong>题目描述</strong></p><blockquote><p>Mooncake is a Chinese bakery product traditionally eaten during the Mid-Autumn Festival. Many types of fillings and<br>crusts can be found in traditional mooncakes according to the region’s culture. Now given the inventory amounts and<br>the prices of all kinds of the mooncakes, together with the maximum total demand of the market, you are supposed to<br>tell the maximum profit that can be made.<br>Note: partial inventory storage can be taken. The sample shows the following situation: given three kinds of<br>mooncakes with inventory amounts being 180, 150, and 100 thousand tons, and the prices being 7.5, 7.2, and 4.5<br>billion yuans. If the market demand can be at most 200 thousand tons, the best we can do is to sell 150 thousand<br>tons of the second kind of mooncake, and 50 thousand tons of the third kind. Hence the total profit is 7.2 + 4.5&#x2F;2 &#x3D;<br>9.45 (billion yuans).</p></blockquote><p><strong>输入描述</strong></p><blockquote><p>Each input file contains one test case. For each case, the first line contains 2 positive integers N (&lt;&#x3D;1000), the number of different kinds<br>of mooncakes, and D (&lt;&#x3D;500 thousand tons), the maximum total demand of the market. Then the second line gives the positive inventory<br>amounts (in thousand tons), and the third line gives the positive prices (in billion yuans) of N kinds of mooncakes. All the numbers in a<br>line are separated by a space.</p></blockquote><p><strong>输出描述</strong></p><blockquote><p>For each test case, print the maximum profit (in billion yuans) in one line, accurate up to 2 decimal places.</p></blockquote><p><strong>输入例子</strong></p><blockquote><p>3 20<br>18 15 10<br>75 72 45</p></blockquote><p><strong>输出例子</strong></p><blockquote><p>94.50</p></blockquote><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><p><strong>题目难度</strong></p><p>简单</p><p><strong>解题算法</strong></p><p>贪心</p><p><strong>我的代码</strong>（无注释版）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Mooncake</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> amounts;</span><br><span class="line">    <span class="type">double</span> prices;</span><br><span class="line">    <span class="type">double</span> per;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Mooncake &amp;next)<span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> per &gt; next.per;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;Mooncake,mooncake[<span class="number">1010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> kind,demand;</span><br><span class="line">    cin &gt;&gt; kind &gt;&gt; demand;</span><br><span class="line">    Mooncake mooncake[<span class="number">1010</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> input = <span class="number">0</span>; input &lt; kind; input++)</span><br><span class="line">        cin &gt;&gt; mooncake[input].amounts;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> input = <span class="number">0</span>; input &lt; kind; input++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; mooncake[input].prices;</span><br><span class="line">        mooncake[input].per = mooncake[input].prices / mooncake[input].amounts;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(mooncake,mooncake+kind);</span><br><span class="line">    <span class="type">double</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> input = <span class="number">0</span>; input &lt; kind; input++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(demand &gt; mooncake[input].amounts)</span><br><span class="line">        &#123;</span><br><span class="line">            demand -= mooncake[input].amounts;</span><br><span class="line">            sum += mooncake[input].prices;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum += (demand / mooncake[input].amounts * mooncake[input].prices);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此题较为简单，旨在复习<strong>运算符重载</strong>与<strong>结构体数组排序</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Mooncake &amp;next)<span class="type">const</span><span class="comment">//运算符重载</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> per &gt; next.per;<span class="comment">//自大到小降序排列</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据代码逻辑，如果当前对象的per值大于传入对象的per值，那么返回true，意味着当前对象应该排在传入对象之前，即按照per值从大到小排列。因此，这段代码是用于降序排列的。如果需要自小到大升序排列，则修改<code>return per &gt; next.per;</code>中的大于号<code>&gt;</code>为小于号<code>&lt;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="C/C++" scheme="https://waltyoung.github.io/tags/C-C/"/>
    
    <category term="PAT" scheme="https://waltyoung.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>VS Code SSH连接远程服务器</title>
    <link href="https://waltyoung.github.io/2023/10/14/VS-Code-SSH%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://waltyoung.github.io/2023/10/14/VS-Code-SSH%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2023-10-14T07:39:22.000Z</published>
    <updated>2023-10-14T08:20:43.473Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="VS-Code-SSH连接远程服务器"><a href="#VS-Code-SSH连接远程服务器" class="headerlink" title="VS Code SSH连接远程服务器"></a>VS Code SSH连接远程服务器</h1><p>因为 Vim 不支持代码补全，所以搭建一套 VS Code 的远端开发环境。笔者结合网络上的文章实操，遂有了此篇文章</p><p>环境：客户端：win10 服务器：Ubuntu</p><h2 id="第0步：系统更新"><a href="#第0步：系统更新" class="headerlink" title="第0步：系统更新"></a>第0步：系统更新</h2><p>切换到root用户，并且注意全程使用root用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su</span><br></pre></td></tr></table></figure><p>更新软件包列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure><p>进行一次升级</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get upgrade</span><br></pre></td></tr></table></figure><h2 id="第1步：服务器安装SSH"><a href="#第1步：服务器安装SSH" class="headerlink" title="第1步：服务器安装SSH"></a>第1步：服务器安装SSH</h2><p>注意使用root用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install net-tools</span><br><span class="line">apt-get install openssh-server</span><br></pre></td></tr></table></figure><h2 id="第2步：服务器配置SSH"><a href="#第2步：服务器配置SSH" class="headerlink" title="第2步：服务器配置SSH"></a>第2步：服务器配置SSH</h2><p>打开 SSH 配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>修改SSH配置项：</p><ul><li>取消<code>PermitRootLogin</code>的注释</li><li>取消<code>PubkeyAuthentication</code>的注释</li><li>添加<code>RSAAuthentication yes</code>内容</li></ul><p>如下图所示</p><p><img src="https://s2.loli.net/2023/10/14/tPZ9M7DCmFzjLQR.png" alt="SSH配置项.png"></p><h2 id="第3步：客户端安装SSH"><a href="#第3步：客户端安装SSH" class="headerlink" title="第3步：客户端安装SSH"></a>第3步：客户端安装SSH</h2><p>通过安装 Git 来获取 SSH 功能。因为我的客户端是Win10，没有默认搭载 Git。如果读者是相同的环境，可以查看<a href="https://blog.csdn.net/mukes/article/details/115693833" title="Git 详细安装教程（详解 Git 安装过程的每一个步骤）">https://blog.csdn.net/mukes/article/details/115693833</a>。该文章详细介绍了 Git 的安装教程</p><p>安装完成后使用<code>ssh</code>检查安装是否成功</p><p><img src="https://s2.loli.net/2023/10/14/A4PKR6eVrazbiOM.png" alt="SSH.png"></p><p>若如上图所示，则代表 SSH 已经安装成功</p><h2 id="第4步：客户端生成密钥对"><a href="#第4步：客户端生成密钥对" class="headerlink" title="第4步：客户端生成密钥对"></a>第4步：客户端生成密钥对</h2><p>使用如下命令，生成 SSH 密钥对</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><h2 id="第5步：服务器保存客户端的-SSH-公钥"><a href="#第5步：服务器保存客户端的-SSH-公钥" class="headerlink" title="第5步：服务器保存客户端的 SSH 公钥"></a>第5步：服务器保存客户端的 SSH 公钥</h2><p>在上一步中生成的密钥对，默认保存路径为：<code>C:\Users\user\.ssh</code>（路径中的<code>user</code>需要读者自行替换为实际的用户名）</p><p>将<code>.ssh</code>文件夹下的<code>id_rsa.pub</code>，复制到远程服务器的<code>.ssh</code>文件夹中。（<code>id_rsa.pub</code>是公钥，从其后缀名<code>.pub</code>也可见。<em>pub是 public 的前3个字母</em>）</p><p><code>.ssh</code>文件夹可以是根目录下的<code>.ssh</code>文件夹，也可以是用户目录下的<code>.ssh</code>文件夹。<strong>如果没有<code>.ssh</code>文件夹，则新建一个文件夹，命名为<code>.ssh</code>即可。</strong></p><p>在<code>.ssh</code>目录下，使用如下命令，生成<code>authorized_keys</code>文件，可以在连接到此服务器时不输入密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure><h2 id="第6步：客户端VS-Code添加插件并配置"><a href="#第6步：客户端VS-Code添加插件并配置" class="headerlink" title="第6步：客户端VS Code添加插件并配置"></a>第6步：客户端VS Code添加插件并配置</h2><p>在 VS Code 中添加<code>Remote - SSH</code>插件</p><p>若添加成功，则在左侧可见 远程资源管理器。点击远程资源管理器，再点击小齿轮，如下图所示</p><p><img src="https://s2.loli.net/2023/10/14/KSW5HncqZ478JVO.png" alt="VScode的SSH.png"></p><p>选择第一项，如下图所示</p><p><img src="https://s2.loli.net/2023/10/14/X8nDHR2KpwUlMOb.png" alt="VScode配置SSH.png"></p><p>根据实际情况，修改配置项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host 服务器主机名</span><br><span class="line">    HostName 服务器IP地址</span><br><span class="line">    User 用户名</span><br><span class="line">    IdentityFile &quot;私钥路径&quot;</span><br></pre></td></tr></table></figure><p><strong>完成</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="安装教程" scheme="https://waltyoung.github.io/tags/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://waltyoung.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>CTF-Crypto-Caesar</title>
    <link href="https://waltyoung.github.io/2023/10/08/CTF-Crypto-Caesar/"/>
    <id>https://waltyoung.github.io/2023/10/08/CTF-Crypto-Caesar/</id>
    <published>2023-10-08T10:59:56.000Z</published>
    <updated>2023-10-08T11:01:39.518Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="CTF-Crypto-Caesar"><a href="#CTF-Crypto-Caesar" class="headerlink" title="CTF-Crypto-Caesar"></a>CTF-Crypto-Caesar</h1><p>笔者遇到凯撒加密的某一环节，因凯撒加密的方式较为简单，决定手写解密代码，在此存储、记录</p><p>近期在学习计算机网络编程（socket 编程），对C语言更加熟练一些，遂用C语言写了解密代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> caesar[<span class="number">110</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,caesar);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,<span class="number">26</span>-i);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;caesar[j]!=<span class="string">&#x27;\0&#x27;</span>;j++)<span class="comment">//(char)将ASCII码转化为字符</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(caesar[j] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; caesar[j] &lt;= <span class="string">&#x27;Z&#x27;</span>) </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,(<span class="type">char</span>)( (caesar[j]-<span class="string">&#x27;A&#x27;</span>)+i )%<span class="number">26</span> + <span class="string">&#x27;A&#x27;</span> );</span><br><span class="line"><span class="keyword">if</span>(caesar[j] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; caesar[j] &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,(<span class="type">char</span>)( (caesar[j]-<span class="string">&#x27;a&#x27;</span>)+i )%<span class="number">26</span> + <span class="string">&#x27;a&#x27;</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此C语言代码较为简单，不逐行解释</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://waltyoung.github.io/tags/CTF/"/>
    
    <category term="Misc" scheme="https://waltyoung.github.io/tags/Misc/"/>
    
    <category term="Crypto" scheme="https://waltyoung.github.io/tags/Crypto/"/>
    
    <category term="C/C++" scheme="https://waltyoung.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>CTF-Reverse-Sign Up</title>
    <link href="https://waltyoung.github.io/2023/09/28/CTF-Reverse-Sign-Up/"/>
    <id>https://waltyoung.github.io/2023/09/28/CTF-Reverse-Sign-Up/</id>
    <published>2023-09-28T09:55:57.000Z</published>
    <updated>2023-09-28T09:57:25.316Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="CTF-Reverse-Sign-Up"><a href="#CTF-Reverse-Sign-Up" class="headerlink" title="CTF-Reverse-Sign Up"></a>CTF-Reverse-Sign Up</h1><p>原题链接：<a href="https://www.polarctf.com/#/page/challenges">https://www.polarctf.com/#/page/challenges</a>的Sign Up</p><p>笔者拿到该题，优先置于 exeinfope 中侦壳</p><p><img src="https://s2.loli.net/2023/09/27/inON4WL5KA2hGRe.png" alt="侦壳signup.png"></p><p>如上图所示，64位，无壳</p><p>置于 IDA 中反编译</p><p><img src="https://s2.loli.net/2023/09/27/oBU9ASOtmQKlY5k.png" alt="IDA置于IDA中反编译.png"></p><p>如上图所示，这是 main 函数的汇编代码</p><p>按下<code>F5</code>（笔记本为Fn + F5）展示C语言的代码，如下图所示</p><p><img src="https://s2.loli.net/2023/09/27/bn6uxq4MwEH3c1Z.png" alt="sign up的main函数.png"></p><ul><li><code>_main();</code>无实义</li><li><code>Input_Data();</code>从命名上看用于输入</li><li><code>Check_Data();</code>从命名上看用于检查输入，判断 flag 是否正确</li></ul><p><code>Input_Data()</code>函数如下</p><p><img src="https://s2.loli.net/2023/09/27/aI8sQYWgmeRVEud.png" alt="原Input_Data__.png"></p><p>从 main 函数、Input_Data 函数可以发现<code>Buffer</code>、<code>num</code>、<code>password</code>是全局变量<em>（因为在 main 函数、Input_Data 函数都没有定义任何变量）</em></p><p>双击<code>Buffer</code>跳转到全局变量<code>Buffer</code>定义的十六进制处，如下图所示</p><p><img src="https://s2.loli.net/2023/09/27/1uTopneb3hC7MPk.png" alt="Buffer定义的十六进制处.png"></p><p>按下<code>A</code>（大小写无关）将十六进制解码成字符，如下图所示</p><p><img src="https://s2.loli.net/2023/09/27/NG9AFIYnKd54Lvz.png" alt="将十六进制解码成字符.png"></p><p>如果没有成功，且报错，请参考这篇文章：<a href="https://blog.csdn.net/qq_36535153/article/details/111252053" title="IDA7.0 显示中文的快捷操作">https://blog.csdn.net/qq_36535153&#x2F;article&#x2F;details&#x2F;111252053</a></p><p>按下<code>Esc</code>返回<code>Input_Data()</code>函数，如下图所示</p><p><img src="https://s2.loli.net/2023/09/27/LZzeBX8WMbAoxti.png" alt="解码后的Input_Data__.png"></p><p>可见<code>&amp;Buffer</code>替换为中文字符，共需要2个输入<code>num</code>、<code>password</code></p><p><code>Check_Data()</code>函数如下</p><p><img src="https://s2.loli.net/2023/09/28/elfg7CNBRhGXLEo.png" alt="原Check_Data__.png"></p><p>解码后的<code>Check_Data()</code>函数如下</p><p><img src="https://s2.loli.net/2023/09/28/E5tT9VdGpXQcf4v.png" alt="解码后的Check_Data__.png"></p><p>如上图所示，在2个for循环中分别使用到了<code>key_num</code>、<code>key_password</code>数组</p><p>双击<code>key_num</code>跳转到全局变量<code>key_num</code>定义的十六进制处，如下图所示</p><p><img src="https://s2.loli.net/2023/09/28/oZelBW8bOJzMNLc.png" alt="key_num、key_password数组.png"></p><p><code>key_num</code>数组的值是<code>192168109</code></p><p><code>key_password</code>数组的值是<code>root</code></p><p>通过后3个 if 语句可以得知只有在标志位<code>v3</code>为1时表示”密码正确!”，<code>v4</code>为1时表示”账号正确”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if ( !v4 &amp;&amp; !v3 )</span><br><span class="line">    return puts(&quot;账号密码错误:&quot;);</span><br><span class="line">if ( !v4 )</span><br><span class="line">    return puts(&quot;账号错误:&quot;);</span><br><span class="line">if ( v3 )</span><br><span class="line">    return printf(&quot;密码正确!&quot;);</span><br><span class="line">return puts(&quot;密码错误:&quot;);</span><br></pre></td></tr></table></figure><p>第一个 for 语句表明<code>num</code>数组的值的AscII值是<code>key_num</code>数组的值的AscII值减一。<strong>需要注意的是循环只能执行7次，但<code>key_num</code>数组长度为9</strong>（笔者第一次尝试解题时就被）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for ( i = 0; i &lt;= 6; ++i )</span><br><span class="line">&#123;</span><br><span class="line">    if ( num[i] + 1 != key_num[i] )</span><br><span class="line">    v4 = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个 for 语句表明<code>password</code>数组的值的AscII值是<code>key_password</code>数组的值的AscII值减二。循环可以执行4次，与<code>key_password</code>数组的长度一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for ( j = 0; j &lt;= 3; ++j )</span><br><span class="line">&#123;</span><br><span class="line">if ( password[j] + 2 != key_password[j] )</span><br><span class="line">    v3 = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据以上分析，我们需要将<code>192168109</code>的前7位减一，<code>root</code>的4位向前推2位</p><p>得到<code>081057008</code>和<code>pmmr</code></p><p>验证Sign Up.exe的答案</p><p><img src="https://s2.loli.net/2023/09/28/NBp5RVCqWfK4wY2.png" alt="signup答案.png"></p><p><strong>后记</strong></p><p>在做逆向题时，遇到的<code>0i64</code>，<code>1i64</code>，<code>1000i64</code>相当于将0，1，1000转换为64位格式进行处理，i64跟u、f等类似，如1.0f，2000.0f。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://waltyoung.github.io/tags/CTF/"/>
    
    <category term="Windows" scheme="https://waltyoung.github.io/tags/Windows/"/>
    
    <category term="Reverse" scheme="https://waltyoung.github.io/tags/Reverse/"/>
    
    <category term="PE" scheme="https://waltyoung.github.io/tags/PE/"/>
    
  </entry>
  
  <entry>
    <title>CTF-Reverse-AndroidXor</title>
    <link href="https://waltyoung.github.io/2023/09/26/CTF-Reverse-AndroidXor/"/>
    <id>https://waltyoung.github.io/2023/09/26/CTF-Reverse-AndroidXor/</id>
    <published>2023-09-26T10:15:48.000Z</published>
    <updated>2023-09-26T10:16:38.381Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="CTF-Reverse-AndroidXor"><a href="#CTF-Reverse-AndroidXor" class="headerlink" title="CTF-Reverse-AndroidXor"></a>CTF-Reverse-AndroidXor</h1><p>原题链接：<a href="https://www.polarctf.com/#/page/challenges">https://www.polarctf.com/#/page/challenges</a>的AndroidXor</p><p>三个工具（即工作流）：</p><ul><li>Apktool：通过该工具能完整的从 apk 中提取出 resource、dex、manifest、xml 等文件，也可以修改资源文件之后 rebuild 生成一个 apk 文件</li><li>dex2jar：通过该工具将 dex 文件生成（包含class 文件的）jar 文件</li><li>JD-GUI：通过该工具，可以通过可视化的界面操作查看 jar 文件，即查看反编译后的源码情况</li></ul><p>笔者拿到该题，发现是 apk 文件，将其重命名为 zip 文件后打开。（apk 文件是一个 zip 压缩包，如果仅仅是想获取源码文件，不关心具体资源文件，可以直接解压提取 dex 文件，再进行 dex 到 jar 文件的转换。）</p><p>下图可见压缩包内的 dex 文件</p><p><img src="https://s2.loli.net/2023/09/24/GCuYgNipr2SetHd.png" alt="可见压缩包内的dex文件.png"></p><p>解压<code>classes.dex</code>文件，置于<code>dex2jar-v2.3\target</code>目录下</p><p>使用命令将 dex 文件生成 jar 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\d2j-dex2jar.bat target\classes.dex</span><br></pre></td></tr></table></figure><p>由下图可见生成了 classes-dex2jar.jar 文件</p><p><img src="https://s2.loli.net/2023/09/24/u5ycEIhk4qV8gUY.png" alt="使用命令将 dex 文件生成 jar 文件.png"></p><p>将 jar 文件置于 jd-gui.exe 反编译，定位目标文件，由下图可见是<code>MainActivity.java</code>文件</p><p><img src="https://s2.loli.net/2023/09/26/PFLyORaxBDKoshl.png" alt="定位目标文件.png"></p><p>将源文件反编译、保存</p><p>置于IDEA查看源文件，在<code>MainActivity.java</code>文件可以注意到 Xor 函数，根据题目的名字（Android异或）和提示，我们可以确定 Xor 函数是核心代码</p><p>如下是 Xor 函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">Xor</span><span class="params">(String paramString1, String paramString2)</span> &#123;</span><br><span class="line">String str1;</span><br><span class="line"><span class="type">char</span>[] arrayOfChar = <span class="keyword">new</span> <span class="title class_">char</span>[paramString1.length()];</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> paramString1.length();</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;wrong!!!&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (i != <span class="number">25</span>) &#123;</span><br><span class="line">    str1 = <span class="string">&quot;wrong!!!&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">str1 = <span class="string">&quot;you win!!!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; paramString1.length()) &#123;</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> (<span class="type">char</span>)(paramString1.charAt(i) ^ paramString2.charAt(i % paramString2.length()));</span><br><span class="line">        arrayOfChar[i] = c;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">0</span>] = <span class="string">&#x27;\016&#x27;</span>; </span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">1</span>] = <span class="string">&#x27;\r&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">2</span>] = <span class="string">&#x27;\021&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">3</span>] = <span class="string">&#x27;\027&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">4</span>] = <span class="string">&#x27;\002&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">5</span>] = <span class="string">&#x27;K&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">6</span>] = <span class="string">&#x27;I&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">7</span>] = <span class="string">&#x27;7&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">8</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">9</span>] = <span class="string">&#x27;\036&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">10</span>] = <span class="string">&#x27;\024&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">11</span>] = <span class="string">&#x27;I&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">12</span>] = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">13</span>] = <span class="string">&#x27;\002&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">14</span>] = <span class="string">&#x27;\f&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">15</span>] = <span class="string">&#x27;&gt;&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">16</span>] = <span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">17</span>] = <span class="string">&#x27;@&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">18</span>] = <span class="string">&#x27;\013&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">19</span>] = <span class="string">&#x27;\&#x27;&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">20</span>] = <span class="string">&#x27;K&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">21</span>] = <span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">22</span>] = <span class="string">&#x27;\031&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">23</span>] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">24</span>] = <span class="string">&#x27;\r&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[i] != c) &#123;</span><br><span class="line">        paramString1 = str2;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">    paramString1 = str1;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> paramString1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按住 ctrl键，跳转至最近一次的方法调用 </p><p><img src="https://s2.loli.net/2023/09/26/WCSegQqMJONGBx4.png" alt="相当于main函数.png"></p><p>可以注意到 Onclick 方法相当于C语言的main函数，调用 Xor 方法，传入 变量str、字符串<code>happyx3</code>。 Xor 方法内的变量<code>paramString1</code>的初始值来自变量 str ，变量 str 来自输入。变量<code>paramString2</code>的初始值是<code>happyx3</code></p><p>笔者将逐段解释 Xor 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String str1;</span><br><span class="line"><span class="type">char</span>[] arrayOfChar = <span class="keyword">new</span> <span class="title class_">char</span>[paramString1.length()];</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> paramString1.length();</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;wrong!!!&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (i != <span class="number">25</span>) &#123;</span><br><span class="line">str1 = <span class="string">&quot;wrong!!!&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">str1 = <span class="string">&quot;you win!!!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本段代码第二行定义变量<code>arrayOfChar</code>字符数组；第三行定义变量<code>i</code>的值是字符串变量<code>paramString1</code>的长度，并且<strong>根据 if-else 语句的内容看，只有字符串的长度等于25时，才是正确的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; paramString1.length()) &#123;</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> (<span class="type">char</span>)(paramString1.charAt(i) ^ paramString2.charAt(i % paramString2.length()));</span><br><span class="line">        arrayOfChar[i] = c;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">0</span>] = <span class="string">&#x27;\016&#x27;</span>; </span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">1</span>] = <span class="string">&#x27;\r&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">2</span>] = <span class="string">&#x27;\021&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">3</span>] = <span class="string">&#x27;\027&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">4</span>] = <span class="string">&#x27;\002&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">5</span>] = <span class="string">&#x27;K&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">6</span>] = <span class="string">&#x27;I&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">7</span>] = <span class="string">&#x27;7&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">8</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">9</span>] = <span class="string">&#x27;\036&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">10</span>] = <span class="string">&#x27;\024&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">11</span>] = <span class="string">&#x27;I&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">12</span>] = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">13</span>] = <span class="string">&#x27;\002&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">14</span>] = <span class="string">&#x27;\f&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">15</span>] = <span class="string">&#x27;&gt;&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">16</span>] = <span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">17</span>] = <span class="string">&#x27;@&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">18</span>] = <span class="string">&#x27;\013&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">19</span>] = <span class="string">&#x27;\&#x27;&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">20</span>] = <span class="string">&#x27;K&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">21</span>] = <span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">22</span>] = <span class="string">&#x27;\031&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">23</span>] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[<span class="number">24</span>] = <span class="string">&#x27;\r&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[i] != c) &#123;</span><br><span class="line">        paramString1 = str2;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">    paramString1 = str1;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优先解释关键代码<code>char c = (char)(paramString1.charAt(i) ^ paramString2.charAt(i % paramString2.length()));</code>的作用是将两个字符串中对应位置的字符进行异或运算，并将结果赋值给变量c。</p><p>具体解释如下：</p><ul><li>paramString1.charAt(i)：表示取出字符串paramString1中索引为i的字符。</li><li>paramString2.charAt(i % paramString2.length())：表示取出字符串paramString2中索引为i % paramString2.length()的字符。这里使用了取余运算符%来保证索引不超过字符串长度。</li><li>^：表示异或运算符，将两个字符进行异或运算。</li><li>(char)：将异或运算的结果强制转换为字符类型。</li></ul><p><code>(new char[25])[0] = &#39;\016&#39;;</code>创建了一个长度为 25 的字符数组，并将数组的第一个元素赋值为十进制数 14 对应的字符。其他类似语句同理。需要注意的是 <code>\016</code> 表示<strong>八进制数 16</strong>，<strong>计算机语言中八进制数用数字0开头</strong>，例如：010、011、016都是八进制数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>])[i] != c) &#123;</span><br><span class="line">paramString1 = str2;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该语句确定了条件判断依据，即<strong>输入的字符串与<code>happyx3</code>字符串异或的结果必须等于<code>(new char[25])[i]</code>的值</strong></p><hr><p>如下是笔者写的解题脚本，可以直接得到 flag 。如觉得输出结果不方便，可以自行定义一个 list ，将输出结果保存到该 list ，使用<code>&#39;&#39;.join()</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ch = [</span><br><span class="line">    <span class="string">&#x27;\016&#x27;</span>,<span class="string">&#x27;\r&#x27;</span>,<span class="string">&#x27;\021&#x27;</span>,<span class="string">&#x27;\027&#x27;</span>,<span class="string">&#x27;\002&#x27;</span>,<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;\036&#x27;</span>,<span class="string">&#x27;\024&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\002&#x27;</span>,<span class="string">&#x27;\f&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;@&#x27;</span>,<span class="string">&#x27;\013&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;\031&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;\r&#x27;</span></span><br><span class="line">]</span><br><span class="line">string = [<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(ch):</span><br><span class="line">    <span class="built_in">print</span>( <span class="built_in">chr</span>( <span class="built_in">ord</span>(c) ^ <span class="built_in">ord</span>( string[i % <span class="built_in">len</span>(string)] ) ) )</span><br></pre></td></tr></table></figure><p>笔者将逐行解释代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ch = [</span><br><span class="line">    <span class="string">&#x27;\016&#x27;</span>,<span class="string">&#x27;\r&#x27;</span>,<span class="string">&#x27;\021&#x27;</span>,<span class="string">&#x27;\027&#x27;</span>,<span class="string">&#x27;\002&#x27;</span>,<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;\036&#x27;</span>,<span class="string">&#x27;\024&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\002&#x27;</span>,<span class="string">&#x27;\f&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;@&#x27;</span>,<span class="string">&#x27;\013&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;\031&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;\r&#x27;</span></span><br><span class="line">]</span><br><span class="line">string = [<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br></pre></td></tr></table></figure><p>创建2个 list (相当于C语言的数组，但其中的元素可以是不同的数据类型)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(ch):</span><br><span class="line">    <span class="built_in">print</span>( <span class="built_in">chr</span>( <span class="built_in">ord</span>(c) ^ <span class="built_in">ord</span>( string[i % <span class="built_in">len</span>(string)] ) ) )</span><br></pre></td></tr></table></figure><ol><li>使用 enumerate 函数来同时迭代ch列表和索引值，避免使用range和索引访问。</li></ol><blockquote><p>enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</p><p><strong>普通的 for 循环</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line">seq = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> seq:</span><br><span class="line">    <span class="built_in">print</span>(i, seq[i])</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>使用 enumerate 的 for 循环</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">seq = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i, element <span class="keyword">in</span> <span class="built_in">enumerate</span>(seq):</span><br><span class="line">    <span class="built_in">print</span>(i, element)</span><br></pre></td></tr></table></figure></blockquote><ol start="2"><li><code>i % len(string)</code>取出字符串中的字符，模仿自 Java 源代码<code>i % paramString2.length()</code></li><li>使用 ord() 将字符转换为对应的ASCII码值进行异或运算。</li><li>使用 chr() 将ASCII码值转换为对应的字符。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://waltyoung.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://waltyoung.github.io/tags/Reverse/"/>
    
    <category term="Java" scheme="https://waltyoung.github.io/tags/Java/"/>
    
    <category term="Python" scheme="https://waltyoung.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>CTF-Reverse-Java_Tools</title>
    <link href="https://waltyoung.github.io/2023/09/25/CTF-Reverse-Java-Tools/"/>
    <id>https://waltyoung.github.io/2023/09/25/CTF-Reverse-Java-Tools/</id>
    <published>2023-09-25T02:04:48.000Z</published>
    <updated>2023-09-25T02:10:51.242Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="CTF-Reverse-Java-Tools"><a href="#CTF-Reverse-Java-Tools" class="headerlink" title="CTF-Reverse-Java_Tools"></a>CTF-Reverse-Java_Tools</h1><p>原题链接：<a href="https://www.polarctf.com/#/page/challenges">https://www.polarctf.com/#/page/challenges</a>的Java_Tools</p><p>笔者拿到该题，发现是 jar 文件，优先置于 jd-gui.exe 反编译。可见如下两个文件</p><p><img src="https://s2.loli.net/2023/09/23/RGZgQeM9WzIl5VC.png" alt="jar 文件内容.png"></p><p>Test.java 文件的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;Welcome to Polar_Ctf!,come to play!&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;Please Input : &quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> in.next();</span><br><span class="line">    <span class="type">char</span>[] Strings = name.toCharArray();</span><br><span class="line">    Tools.Add_1(Strings, <span class="number">3</span>);</span><br><span class="line">    Tools.Re(Strings);</span><br><span class="line">    Tools.Judge(Strings);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tools.java 文件的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tools</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Re</span><span class="params">(<span class="type">char</span>[] str)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length / <span class="number">2</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> str[i];</span><br><span class="line">      str[i] = str[str.length - i - <span class="number">1</span>];</span><br><span class="line">      str[str.length - i - <span class="number">1</span>] = temp;</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Xor</span><span class="params">(<span class="type">char</span>[] str)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length; i++)</span><br><span class="line">      str[i] = (<span class="type">char</span>)(str[i] ^ j); </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Add_1</span><span class="params">(<span class="type">char</span>[] str, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length; i++)</span><br><span class="line">      str[i] = (<span class="type">char</span>)(str[i] + x); </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Judge</span><span class="params">(<span class="type">char</span>[] str)</span> &#123;</span><br><span class="line">    ArrayList&lt;Character&gt; Result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    ArrayList&lt;Character&gt; Flag = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">char</span>[] arrayOfChar1;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">byte</span> b;</span><br><span class="line">    <span class="keyword">for</span> (arrayOfChar1 = str, i = arrayOfChar1.length, b = <span class="number">0</span>; b &lt; i; ) &#123;</span><br><span class="line">      <span class="type">Character</span> <span class="variable">character</span> <span class="operator">=</span> Character.valueOf(arrayOfChar1[b]);</span><br><span class="line">      Result.add(Character.valueOf(character.charValue()));</span><br><span class="line">      b++;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;$gourZroohK&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sttr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(str);</span><br><span class="line">    <span class="keyword">if</span> (name.contains(sttr)) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;You Are Right!MD5!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;You Are Wrong! please try it again!&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="type">char</span>[] Strings = name.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : Strings)</span><br><span class="line">      Flag.add(Character.valueOf(c)); </span><br><span class="line">    <span class="keyword">if</span> (Result.equals(Flag)) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;You Are Right!MD5!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;You Are Wrong! please try it again!&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然可见 Test.java 调用 Tools.java 的方法，直接阅读代码可知 Add_1 方法是默认情况的凯撒加密， Re 方法是互换位置， Judge 方法是判断输入是否正确， Xor 方法没有使用</p><p>实战或比赛中，可以对代码稍加分析后立即调试，在调试中观察代码的执行情况</p><p>为了便于调试，我们可以将源文件置于 IDEA 项目的 <code>src</code> 目录下，并且重命名 Test.java 为 Main.java，删除每个java文件的第一行<code>package main.java</code></p><p>如图所示java文件位置</p><p><img src="https://s2.loli.net/2023/09/24/MrQCA1YFlP2S9yD.png" alt="java文件位置.png"></p><p>以<code>12345678</code>为输入，作示例</p><p>下图是步入 Add_1 函数前，Strings数组的内容就是笔者的输入</p><p><img src="https://s2.loli.net/2023/09/23/PvJ4c2dorhiAlDy.png" alt="示例：步入Add_1函数前.png"></p><p>下图是步出 Add_1 函数后即步入 Re 函数前，Strings数组的内容是笔者的输入经过偏移值为3的凯撒加密后的结果</p><p><img src="https://s2.loli.net/2023/09/23/u3ZNAxdDvzypolS.png" alt="示例：步出Add_1函数后即步入Re函数前.png"></p><p>下图是步出 Re 函数后即步入 Judge 函数前，Strings数组的内容是步入Re函数前的数组 头尾互换。（<em>具体细节情读者自行查看，笔者表述能力不太好QAQ）</em></p><p><img src="https://s2.loli.net/2023/09/23/qrZugJd7pUDnT3A.png" alt="示例：步出Re函数后.png"></p><p>笔者接下来将图文结合逐行解释代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Character&gt; Result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">ArrayList&lt;Character&gt; Flag = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><p>如上代码的作用是新建 Result 、 Flag 数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (arrayOfChar1 = str, i = arrayOfChar1.length, b = <span class="number">0</span>; b &lt; i; ) &#123;</span><br><span class="line">  <span class="type">Character</span> <span class="variable">character</span> <span class="operator">=</span> Character.valueOf(arrayOfChar1[b]);</span><br><span class="line">  Result.add(Character.valueOf(character.charValue()));</span><br><span class="line">  b++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码的作用是复制步入 Judge 函数前 Strings数组的内容到 Result 数组</p><p>调试时也可验证如上代码的作用，下图是Result数组的内容， Result 数组的内容和 str 数组、步入 Judge 函数前 Strings数组的内容完全相同</p><p><img src="https://s2.loli.net/2023/09/24/fMwt91QJR4PShHI.png" alt="Result数组的内容.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;$gourZroohK&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">sttr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(str); </span><br></pre></td></tr></table></figure><p>如上代码的作用是第一行，创建一个 String 类型的变量 name，并赋值<code>$gourZroohK</code>；第二行，将传入的数组 str 转化为 String 类型的字符串，并保存到 String 类型的变量sttr 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (name.contains(sttr)) &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;You Are Right!MD5!&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;You Are Wrong! please try it again!&quot;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>如上代码的作用是判断 sttr 是否包含在 name 中。关键方法是contains()。*(与下一段代码相比，不是很重要)*</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>[] Strings = name.toCharArray();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> c : Strings)</span><br><span class="line">  Flag.add(Character.valueOf(c)); </span><br></pre></td></tr></table></figure><p>如上代码的作用是第一行，将 name 字符串转化为 char 类型的数组，并保存到 char 类型的 Strings 数组中；第二行，for 语句的作用的本质是复制第一行的 Strings数组的内容到 Flag 数组中</p><p>调试时也可验证如上代码的作用，下图是 Flag 数组的内容， Flag 数组的内容和 Strings数组的内容完全相同</p><p><img src="https://s2.loli.net/2023/09/24/XDiIQKB4bFhwyEJ.png" alt="flag数组的内容.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Result.equals(Flag)) &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;You Are Right!MD5!&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;You Are Wrong! please try it again!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码的作用是判断 Result 数组是否与 Flag 数组相同。关键方法是equals()。*(与上一段 if 语句相比，这句更重要。因为上一段 if 语句要求 包含flag，这一段 if 语句要求 等于flag)*</p><blockquote><p><strong>总结</strong></p><p>此段代码的正向操作是先偏移值为3的凯撒加密，再进行移位</p><p>故反向操作应该是先进行移位，再偏移值为3的凯撒加密</p><p>具体步骤如下：</p><ol><li>将<code>String name = &quot;$gourZroohK&quot;;</code>的<code>name</code>变量的值，即<code>$gourZroohK</code>，进行移位，可得<code>KhourZroog$</code></li><li>对<code>KhourZroog$</code>进行偏移值为3的凯撒解密，可得<code>HelloWorld!</code></li><li>将<code>HelloWorld!</code>进行 MD5 计算后可得flag</li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://waltyoung.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://waltyoung.github.io/tags/Reverse/"/>
    
    <category term="Java" scheme="https://waltyoung.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>CTF-Misc-大白</title>
    <link href="https://waltyoung.github.io/2023/09/24/CTF-Misc-%E5%A4%A7%E7%99%BD/"/>
    <id>https://waltyoung.github.io/2023/09/24/CTF-Misc-%E5%A4%A7%E7%99%BD/</id>
    <published>2023-09-23T16:38:14.000Z</published>
    <updated>2023-09-23T16:39:26.804Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="CTF-Misc-大白"><a href="#CTF-Misc-大白" class="headerlink" title="CTF-Misc-大白"></a>CTF-Misc-大白</h1><p>原题链接：<a href="https://buuoj.cn/challenges#%E5%A4%A7%E7%99%BD">https://buuoj.cn/challenges#%E5%A4%A7%E7%99%BD</a></p><p>笔者拿到该题，仍是先使用 binwalk 提取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk -e dabai.png --run-as=root</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/09/14/Gn1qMBEasxtXjcR.png" alt="大白_1.png"></p><p>得到如下文件</p><p><img src="https://s2.loli.net/2023/09/14/CAhWSJHG15MzBNg.png" alt="大白_2.png"></p><p>由图可知，文件 5B 的大小是 0B，为空文件；文件 5B.zlib 的大小是 146.9KB，大于1KB，不为空文件</p><p>尝试使用 python 的 zlib 包解压时报错<code>zlib.error: Error -3 while decompressing data: incorrect data check</code>，使用十六进制编辑器打开 5B.zlib 文件，可见 5B.zlib 文件的文件头（魔术头）为78 5E</p><p><img src="https://s2.loli.net/2023/09/14/XI8NjmSZoPgwMzT.png" alt="大白_4.png"></p><p>查询网络可知 zlib 文件的文件头根据加密方式的不同分为如下3种：</p><p><img src="https://s2.loli.net/2023/09/14/8oDEbMhQaBmVRkN.png" alt="大白_3.png"></p><p>笔者无法解压该 5B.zlib 文件</p><p>随后许久，笔者才注意到原图不能被“爱奇艺万能看图王”打开，能被 win10 的“照片”，在 Linux 中打开原图 大白.png 可见具体报错————<strong>IHDR：CRC error</strong></p><p><img src="https://s2.loli.net/2023/09/14/kLA1RCD9ucjpHel.png" alt="大白_5.png"></p><p>查询网络可知 PNG 文件结构如下：</p><p><img src="https://s2.loli.net/2023/09/14/b2YS8LgyVJTptiv.png" alt="大白_6.png"></p><p>查询网络可知 PNG 数据块结构如下：</p><p><img src="https://s2.loli.net/2023/09/14/3NmoPW4cGJsUVd8.png" alt="大白_7.png"></p><p>png 图片可以使用 TweakPng 快速检查文件</p><p>使用 TweakPng 打开被修改尺寸或者是其他信息的PNG图片时，会有提示。</p><p><img src="https://s2.loli.net/2023/09/14/oWwPGqN9ibSTZVU.png" alt="大白_8.png"></p><p>如上图所示，提示CRC错误。</p><p>存在两种可能：</p><ol><li>图片CRC被修改：尝试用十六进制编辑器修改CRC</li><li>图片尺寸被修改：尝试用十六进制编辑器修改图片尺寸</li></ol><p>笔者首先尝试了第一种可能，即修改CRC，没有得到flag</p><p>笔者其后准备计算图片的正确尺寸，下面附上爆破 png 图片正确尺寸的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">crcbp = <span class="built_in">open</span>(<span class="string">&quot;xxx.png&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()    <span class="comment">#打开图片</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1024</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1024</span>):</span><br><span class="line">        data = crcbp[<span class="number">12</span>:<span class="number">16</span>] + \</span><br><span class="line">            struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, i)+struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, j)+crcbp[<span class="number">24</span>:<span class="number">29</span>]</span><br><span class="line">        crc32 = binascii.crc32(data) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="keyword">if</span> crc32 == <span class="number">0xffffffff</span>:    <span class="comment">#图片当前CRC</span></span><br><span class="line">            <span class="built_in">print</span>(i, j)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;hex:&#x27;</span>, <span class="built_in">hex</span>(i), <span class="built_in">hex</span>(j))</span><br></pre></td></tr></table></figure><p>以下是本题实际使用的代码，需要注意的是在Python中，在字符串前面加上r的原因是为了处理文件路径中的反斜杠。通常在Windows系统中，文件路径的反斜杠会被解释为转义字符，这可能导致路径错误或无法识别。为了避免这个问题，可以使用<strong>双反斜杠</strong>或者<strong>使用原始字符串（在字符串前面加上r）</strong>来表示路径。原始字符串会保留字符串中的所有字符，不进行转义，从而确保文件路径的准确性。</p><p><img src="https://s2.loli.net/2023/09/15/7C8zgLuUhTOHVpa.png" alt="大白_9.png"></p><p>爆破结果如下</p><p><img src="https://s2.loli.net/2023/09/15/Q7uLbEetvwqzliW.png" alt="大白_10.png"></p><p>这里可以选择不求甚解地直接在十六进制编辑器里搜索<code>02 A7</code>，然后将其后的数据修改为<code>01 df</code>。笔者选择记录 PNG 文件头格式以便日后的学习</p><p><img src="https://s2.loli.net/2023/09/16/uOYETjC54HpnSFx.png" alt="大白_11.png"></p><p>第一个红框内的<code>89 50 4E 47 0D 0A 1A 0A</code>是 PNG 头部 署名域</p><p>第二个红框内的<code>00 00 00 0D</code>是 Length，即 IHDR 数据域的长度（具体原因可见本文第七张图）</p><p>第三个红框内的<code>49 48 44 52</code>是 Chunk Type Code，即数据域类型是IHDR</p><p>其后就是 Chunk Data</p><p>第四个红框内的<code>00 00 02 A7</code>是 Width</p><p>第五个红框内的<code>00 00 01 00</code>是 Height</p><p>参考链接：<a href="https://blog.csdn.net/u013943420/article/details/76855416" title="PNG文件头格式解析">https://blog.csdn.net/u013943420/article/details/76855416</a></p><p><strong>结论： PNG 文件第17个字节至第24个字节是 PNG 的宽和高</strong></p><p>修改后点击另存为，再次打开可见flag</p><p><img src="https://s2.loli.net/2023/09/16/yzvgRLnGx7KflPo.png" alt="dabai.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://waltyoung.github.io/tags/CTF/"/>
    
    <category term="Misc" scheme="https://waltyoung.github.io/tags/Misc/"/>
    
    <category term="隐写" scheme="https://waltyoung.github.io/tags/%E9%9A%90%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>CTF-Misc-九连环</title>
    <link href="https://waltyoung.github.io/2023/09/23/CTF-Misc-%E4%B9%9D%E8%BF%9E%E7%8E%AF/"/>
    <id>https://waltyoung.github.io/2023/09/23/CTF-Misc-%E4%B9%9D%E8%BF%9E%E7%8E%AF/</id>
    <published>2023-09-22T23:02:44.000Z</published>
    <updated>2023-09-22T14:04:34.183Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="CTF-Misc-九连环"><a href="#CTF-Misc-九连环" class="headerlink" title="CTF-Misc-九连环"></a>CTF-Misc-九连环</h1><p>原题链接：<a href="https://buuoj.cn/challenges#%E4%B9%9D%E8%BF%9E%E7%8E%AF" title="九连环">https://buuoj.cn/challenges#%E4%B9%9D%E8%BF%9E%E7%8E%AF</a></p><p>笔者拿到该题，先使用 <strong>Stegsolve</strong> ，没有发现信息；再使用十六进制编辑器，可以发现 zip 文件头（<code>50 4B 03 04</code>和<code>PK</code>），证明其隐写了 zip 文件。</p><p>使用 binwalk 提取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk -e 123456cry.jpg --run-as=root</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/09/16/59PN4x3YIsSicoy.png" alt="九连环_1.png"></p><p>提取得到一个 zip 压缩包，使用压缩软件打开可见2个文件，且<code>good-已合并.jpg</code>从文件名上判断必然包含隐藏信息</p><p><img src="https://s2.loli.net/2023/09/16/B2pJ5ZW8f6gqVsD.png" alt="九连环_2.png"></p><p>直接解压会报错</p><p><img src="https://s2.loli.net/2023/09/17/OzcmkqxuH2L3CwN.png" alt="九连环_3.png"></p><p>根据提示，笔者原以为需要修复 jpg 文件，但是想到压缩的本质是<strong>找出文件中字符串的概率分布，然后将出现概率高的字符串替换成更短的形式</strong>，所以想到应该是 zip 伪加密</p><p>目前为止，解题思路为最终的 flag 在 <code>qwe.zip</code> 压缩包内，并且 qwe.zip 压缩包是真加密，密码隐藏在 <code>good-已合并.jpg</code> 内，但<code>good-已合并.jpg</code>被伪加密了（判断依据：只有 qwe.zip 压缩包是真加密，其他位置的全局方式位标志都应为不加密）</p><p><img src="https://s2.loli.net/2023/09/19/36AXpcPNtE9jJOy.png" alt="九连环_4.png"></p><p>如上图所示，大红框指向的 qwe.zip 压缩包是真加密，good-已合并.jpg是伪加密</p><p>笔者这里直接给出具体的操作方法，关于 zip 伪加密可以参考我的个人博客的这篇文章<a href="https://waltyoung.github.io/2023/09/15/CTF-Misc-zip%E4%BC%AA%E5%8A%A0%E5%AF%86/" title="CTF-Misc-zip伪加密">https://waltyoung.github.io/2023/09/15/CTF-Misc-zip%E4%BC%AA%E5%8A%A0%E5%AF%86/</a></p><p>结合本文第四张图和第五张图，将红框处的<code>01</code>修改为<code>00</code>后另存为</p><p><img src="https://s2.loli.net/2023/09/19/2G5fsw6LdjIDtvr.png" alt="九连环_5.png"></p><p>关于 CTF压缩包 的分析，请参考这篇文章<a href="https://blog.csdn.net/qq_42551635/article/details/116792548" title="关于CTF压缩包的那些事">https://blog.csdn.net/qq_42551635&#x2F;article&#x2F;details&#x2F;116792548</a></p><p>再次解压后可得到图片<code>good-已合并.jpg</code>，使用 <strong>Stegsolve</strong> ，没有发现信息</p><p>笔者查阅网络后得知本题使用了 <strong>Steghide</strong></p><p>Steghide 下载地址：<a href="https://steghide.sourceforge.net/index.php" title="Steghide">https://steghide.sourceforge.net/index.php</a></p><p>使用方法是一般Windows环境变量的配置</p><blockquote><p><strong>Steghide</strong>的命令如下：</p><p>查看图片中嵌入的文件信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">steghide info 图片名.jpg</span><br></pre></td></tr></table></figure><p>隐藏文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">steghide embed -cf (需要将密码放入的文件) -ef (需要加密的文件)</span><br></pre></td></tr></table></figure><p>提取隐藏的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">steghide extract -sf 图片名 （-p 密码）</span><br></pre></td></tr></table></figure></blockquote><p>使用命令<code>steghide extract -sf good-已合并.jpg</code>提取文件，需要注意的是本题没有在此设定密码，但不保证之后的题目同样不设密码</p><p><img src="https://s2.loli.net/2023/09/17/hNKIBEzmDRQ2pPl.png" alt="九连环_6.png"></p><p>由上图可见，隐藏文件保存到了 ko.txt，打开后得到真加密压缩包的密码，解压即可得到flag</p><p><img src="https://s2.loli.net/2023/09/17/xo1haRuSI2BmdjG.png" alt="九连环_7.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://waltyoung.github.io/tags/CTF/"/>
    
    <category term="Misc" scheme="https://waltyoung.github.io/tags/Misc/"/>
    
    <category term="隐写" scheme="https://waltyoung.github.io/tags/%E9%9A%90%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>Vim优化指南</title>
    <link href="https://waltyoung.github.io/2023/09/22/Vim%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97/"/>
    <id>https://waltyoung.github.io/2023/09/22/Vim%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97/</id>
    <published>2023-09-21T16:29:18.000Z</published>
    <updated>2023-09-22T01:42:42.453Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Vim优化指南"><a href="#Vim优化指南" class="headerlink" title="Vim优化指南"></a>Vim优化指南</h1><p>Vim 作为 Linux 中常用编辑器，使用者可根据自己的需要配置 Vim 的工作环境。</p><p>配置方法如下：</p><ol><li>在末行模式下使用命令<code>:set 配置项</code>或<code>set 配置项 = 值</code>或<code>配置项</code>进行配置。该配置方法的特点是 Vim 重启后丢失原有的末行模式下的配置</li><li>修改 Vim 配置文件<code>/etc/vim/vimrc</code>的内容。<strong>需要注意的是双引号是注释符</strong>。该配置方法的特点是对所有用户生效</li><li>修改 用户home 目录下的配置文件<code>~/.vimrc</code>的内容。<code>~</code>是指 用户home 目录。该配置方法的特点是仅对当前用户生效</li></ol><p>在正式开始之前，请先备份 .vimrc 或 vimrc 文件。命令：<code>cp vimrc vimrc.bak</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">set nocompatible</span><br><span class="line">syntax enable</span><br><span class="line">syntax on</span><br><span class="line">filetype indent on</span><br><span class="line">set tabstop=4</span><br><span class="line">set shiftwidth=4</span><br><span class="line">set autoindent</span><br><span class="line">set cindent</span><br><span class="line">set backspace=2</span><br><span class="line">set cindent shiftwidth=4</span><br><span class="line">set smartindent</span><br><span class="line">set number</span><br><span class="line">set showmatch</span><br><span class="line">set matchtime=5</span><br><span class="line">set background=dark</span><br><span class="line">set mouse=a</span><br><span class="line">set ruler</span><br><span class="line">set hlsearch</span><br><span class="line">set incsearch</span><br><span class="line">set nowrapscan</span><br><span class="line">set cursorline</span><br><span class="line">set history=1000</span><br><span class="line">set ignorecase</span><br><span class="line">inoremap( ()&lt;LEFT&gt;</span><br><span class="line">inoremap[ []&lt;LEFT&gt;</span><br><span class="line">inoremap&#123; &#123;&lt;CR&gt;&#125;&lt;UP&gt;</span><br><span class="line">inoremap&lt; &lt;&gt;&lt;LEFT&gt;</span><br><span class="line">inoremap&quot; &quot;&quot;&lt;LEFT&gt;</span><br><span class="line">inoremap&#x27; &#x27;&#x27;&lt;LEFT&gt;</span><br><span class="line">set wrap</span><br><span class="line">set laststatus=2</span><br><span class="line">set cmdheight=1</span><br><span class="line">set shm+=I</span><br></pre></td></tr></table></figure><p><strong>以下是对Vim配置项的解释</strong>：</p><ul><li><code>set nocompatible</code>: 禁用vi兼容模式，启用vim自身的特性。</li><li><code>syntax enable</code>: 启用语法高亮。</li><li><code>syntax on</code>: 启用语法高亮。</li><li><code>filetype indent on</code>: 根据文件类型启用自动缩进。</li><li><code>set tabstop=4</code>: 设置制表符的宽度为4个空格。</li><li><code>set shiftwidth=4</code>: 设置每次缩进或反缩进的宽度为4个空格。</li><li><code>set autoindent</code>: 启用自动缩进。</li><li><code>set cindent</code>: 启用C语言风格的自动缩进。</li><li><code>set backspace=2</code>: 允许在插入模式下删除任何字符，包括换行符和缩进。</li><li><code>set smartindent</code>: 启用智能缩进，根据上一行的缩进进行自动缩进。</li><li><code>set number</code>: 显示行号。</li><li><code>set showmatch</code>: 在输入括号时，高亮显示匹配的括号。</li><li><code>set matchtime=5</code>: 设置括号匹配高亮的时间（单位为十分之一秒）。</li><li><code>set background=dark</code>: 设置背景为暗色，适用于黑色背景的终端。</li><li><code>set mouse=a</code>: 启用鼠标支持。</li><li><code>set ruler</code>: 显示光标位置的行号和列号。</li><li><code>set hlsearch</code>: 高亮显示搜索结果。</li><li><code>set incsearch</code>: 在输入搜索模式时，实时显示匹配的结果。</li><li><code>set nowrapscan</code>: 禁止搜索到文件末尾后自动回到开头。</li><li><code>set cursorline</code>: 高亮显示当前行。</li><li><code>set history=1000</code>: 设置命令历史记录的最大数量为1000。</li><li><code>set ignorecase</code>: 在搜索时忽略大小写。</li><li><code>inoremap( ()&lt;LEFT&gt;</code>: 在插入模式下，将输入的”(“转换为”()”并将光标移动到左括号内。</li><li><code>inoremap[ []&lt;LEFT&gt;</code>: 在插入模式下，将输入的”[“转换为”[]”并将光标移动到左括号内。</li><li><code>inoremap&#123; &#123;&lt;CR&gt;&#125;&lt;UP&gt;</code>: 在插入模式下，将输入的”{“转换为”{}”并将光标移动到上一行。</li><li><code>inoremap&lt; &lt;&gt;&lt;LEFT&gt;</code>: 在插入模式下，将输入的”&lt;”转换为”&lt;&gt;”并将光标移动到左括号内。</li><li><code>inoremap&quot; &quot;&quot;&lt;LEFT&gt;</code>: 在插入模式下，将输入的引号转换为一对引号并将光标移动到引号内。</li><li><code>inoremap&#39; &#39;&#39;&lt;LEFT&gt;</code>: 在插入模式下，将输入的单引号转换为一对单引号并将光标移动到单引号内。</li><li><code>set wrap</code>: 自动换行显示长行。</li><li><code>set laststatus=2</code>: 在状态栏始终显示状态行。</li><li><code>set cmdheight=1</code>: 设置命令行的高度为1行。</li><li><code>set shm+=I</code>: 将当前行的行号显示在状态栏上。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://waltyoung.github.io/tags/Linux/"/>
    
    <category term="Vim" scheme="https://waltyoung.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>Base64隐写</title>
    <link href="https://waltyoung.github.io/2023/09/21/Base64%E9%9A%90%E5%86%99/"/>
    <id>https://waltyoung.github.io/2023/09/21/Base64%E9%9A%90%E5%86%99/</id>
    <published>2023-09-21T14:36:31.000Z</published>
    <updated>2023-09-21T16:40:09.146Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Base64隐写"><a href="#Base64隐写" class="headerlink" title="Base64隐写"></a>Base64隐写</h1><p>原题链接：<a href="https://buuoj.cn/challenges#[ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020]base64%E9%9A%90%E5%86%99" title="Base64隐写">https://buuoj.cn/challenges#[ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020]base64%E9%9A%90%E5%86%99</a></p><p>Base64 很常见，在 ctf 比赛中更是常见。笔者在遇到本题之前，只将其当做一种加密方式，现在对其做更深入的理解。</p><h2 id="Base64-介绍"><a href="#Base64-介绍" class="headerlink" title="Base64 介绍"></a>Base64 介绍</h2><p>在计算机中的字节共有256个组合，对应就是ascii码，而ascii码的128～255之间的值是不可见字符。而在网络上交换数据时，由于不同的设备对字符的处理方式有区别，不可见字符有可能被错误处理，所以就在传输之前将数据进行Base64编码，以可见字符进行传输。</p><p>Base64 是一种基于 64 个可打印字符（<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</code>，特殊的 <code>=</code> 作为补零时的后缀）来表示二进制数据的表示方法。因为 2 ^ 6 &#x3D; 64，所以每 6 个 bit 为一个单元，对应某个可打印字符。3 个字节有 24 个 bit ，对应于 4 个 Base64 单元，即 3 个字节可由 4 个可打印字符来表示。</p><p>下图是 64 个字符的对应表</p><p><img src="https://s2.loli.net/2023/09/21/IxbEOmhs2fAY415.png" alt="base64.png"></p><h2 id="Base64-转换"><a href="#Base64-转换" class="headerlink" title="Base64 转换"></a>Base64 转换</h2><p>以 <code>Man</code> 作为例子，将字符的 ASCII 码换成二进制，从高位取 6 个 bit ，再转化成十进制， 结合表格，就能够得出对应的字符。</p><p><img src="https://s2.loli.net/2023/09/21/nAcfQuFikXBsbHW.png" alt="base64_convert.png"></p><p>如果编码的字节数不能被 3 整除的话，如下图所示，后面就会多出一个或两个字节，这种情况下就用 0 填充缺省的字节，使其能够被 3 整除，再像上面一样进行 Base64 转换，并在编码后的 Base64 文本后加上一个或两个 <code>=</code> ，代表填补的字节数。</p><p><img src="https://s2.loli.net/2023/09/21/CMJLw3Hh5orODbt.png" alt="base64_patch.png"></p><h2 id="Base64-在-URL-中的使用"><a href="#Base64-在-URL-中的使用" class="headerlink" title="Base64 在 URL 中的使用"></a>Base64 在 URL 中的使用</h2><p>由于标准 Base64 编码过后的数据会出现 <code>/</code> 和 <code>+</code> ，在 URL 中是由特殊含义的，浏览器会将他们变为形如 <code>%xx</code> 的格式，这些 % 存入数据库时还要进行转换，因此 URL 改进的 Base64 就用 <code>-</code> 和 <code>_</code> 取代了这两个字符，并且不会在末尾填充 <code>=</code> 号</p><h2 id="Base64-隐写"><a href="#Base64-隐写" class="headerlink" title="Base64 隐写"></a>Base64 隐写</h2><p>Base64 隐写就是利用解码时丢掉的数据进行信息隐藏，仍以下图为例子</p><p><img src="https://s2.loli.net/2023/09/21/CMJLw3Hh5orODbt.png" alt="base64_patch.png"></p><p>因为上图加粗的零是编码时加上的，所以修改这些零对解码数据没有影响，但是 <code>=</code> 那里的零不能拿来修改，否则破坏了解码第一步，加粗的零作为最后一个字符的二进制组成部分，将被删除，不会影响还原。但是最后一个字符会发生变化。<strong>以上图为例， QkM&#x3D; ，QkN&#x3D; ，QkO&#x3D; ，QkP&#x3D; 最终都会还原成 BC 。</strong></p><blockquote><p>一个 Base64 编码的字符串最多有两个 <code>=</code>，1个 <code>=</code> 可以隐写2个 bit ，2个 <code>=</code> 可以隐写4个 bit 。</p></blockquote><p>因为隐藏的信息有限，所以一般会给多行 base64 编码的字符串，每一行隐藏一部分，最终将这些信息拼接起来将得到隐写信息。</p><h2 id="Base64-隐写解密脚本"><a href="#Base64-隐写解密脚本" class="headerlink" title="Base64 隐写解密脚本"></a>Base64 隐写解密脚本</h2><p>笔者发现网络流传的脚本不能直接使用，遂对其进行了修改，并以注释注明，使其能够在Windows下运行。<em>（脚本的作者大概率是Mac用户）</em></p><p>环境：Win10+Python3.9</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">&#x27;Xiao&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">base64chars = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;tmp.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    bin_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        stegb64 = <span class="built_in">str</span>(line, <span class="string">&#x27;utf-8&#x27;</span>).strip(<span class="string">&#x27;\r\n&#x27;</span>) <span class="comment"># Win下使用\r\n，Linux下使用\n</span></span><br><span class="line">        rowb64 = <span class="built_in">str</span>(base64.b64encode(base64.b64decode(stegb64)), <span class="string">&#x27;utf-8&#x27;</span>).strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        offset = <span class="built_in">abs</span>(base64chars.index(stegb64.replace(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&#x27;</span>)[-<span class="number">1</span>]) - base64chars.index(rowb64.replace(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&#x27;</span>)[-<span class="number">1</span>]))</span><br><span class="line">        equalnum = stegb64.count(<span class="string">&#x27;=&#x27;</span>)  <span class="comment"># no equalnum no offset</span></span><br><span class="line">        <span class="keyword">if</span> equalnum:</span><br><span class="line">            bin_str += <span class="built_in">bin</span>(offset)[<span class="number">2</span>:].zfill(equalnum * <span class="number">2</span>)</span><br><span class="line">        res = [<span class="built_in">chr</span>(<span class="built_in">int</span>(bin_str[i:i + <span class="number">8</span>], <span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(bin_str), <span class="number">8</span>)]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(res)) </span><br></pre></td></tr></table></figure><h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><p><code>base64chars = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#39;</code>相当于字典</p><p><code>with open(&#39;tmp.txt&#39;, &#39;rb&#39;) as f:</code>是python提供的打开文件的方法，不需要关闭文件，即不需要写 f.close()。</p><ul><li>“r” - 读取 - 默认值。打开文件进行读取，如果文件不存在则报错。</li><li>“b” - 二进制 - 二进制模式（例如图像）。</li></ul><p><code>for line in f.readlines():</code>readlines() 方法返回所有行，遍历每一行</p><p><code>bin_str = &#39;&#39;</code>存储隐藏的flag</p><p><code>stegb64 = str(line, &#39;utf-8&#39;).strip(&#39;\r\n&#39;)</code>删除行末的换行符，strip()方法删除开头或结尾的字符，不能删除中间部分的字符。<strong>需要注意的是Win下使用\r\n，Linux下使用\n</strong></p><p><code>rowb64 = str(base64.b64encode(base64.b64decode(stegb64)), &#39;utf-8&#39;).strip(&#39;\n&#39;)</code>解码得到真实信息后再次编码，并删除行末的换行符</p><p><code>offset = abs(base64chars.index(stegb64.replace(&#39;=&#39;, &#39;&#39;)[-1]) - base64chars.index(rowb64.replace(&#39;=&#39;, &#39;&#39;)[-1]))</code>计算偏离值，<code>replace(&#39;=&#39;,&#39;&#39;)[-1]</code>删除 <code>=</code> 并且返回最后一个字符；index() 方法返回字符在 base64chars 中的位置；abs() 返回2个偏离值相减的绝对值</p><p><code>equalnum = stegb64.count(&#39;=&#39;)</code>计算 <code>=</code> 的数量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> equalnum:</span><br><span class="line">    bin_str += <span class="built_in">bin</span>(offset)[<span class="number">2</span>:].zfill(equalnum * <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>如果等号的数量不为0表示隐藏了数据，将隐藏的数据转换成二进制以追加的方式存储到 bin_str 中。bin()方法返回一个整数 int 或者长整数 long int 的二进制表示。zfill()方法返回指定长度的字符串,原字符串右对齐,前面填充0。<em>（笔者还未完全理解）</em></p><p><code>res = [chr(int(bin_str[i:i + 8], 2)) for i in range(0, len(bin_str), 8)]</code><em>（笔者仍未理解）</em></p><p><code>print(&#39;&#39;.join(res))</code>使用字符串的join方法，将列表中的元素用指定的分隔符（这里为空）连接起来，形成一个字符串</p><p>参考链接：<a href="https://www.cnblogs.com/asmurmur/p/14778548.html">https://www.cnblogs.com/asmurmur/p/14778548.html</a></p><h2 id="题目：CTF-Misc-Base64隐写"><a href="#题目：CTF-Misc-Base64隐写" class="headerlink" title="题目：CTF-Misc-Base64隐写"></a>题目：CTF-Misc-Base64隐写</h2><p>原题链接：<a href="https://buuoj.cn/challenges#[ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020]base64%E9%9A%90%E5%86%99" title="Base64隐写">https://buuoj.cn/challenges#[ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020]base64%E9%9A%90%E5%86%99</a></p><p>笔者拿到该题，发现是 tar 文件。在 Windows 下直接解压，会出现元数据（meta data）的隐藏文件，导致解压后的文件不能正常打开。故需要在 Linux 下解压，使用如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7z x attachment.tar</span><br></pre></td></tr></table></figure><p>解压后的得到的 <code>Comeon!.txt</code> 中包含多行 base64 编码的字符串。笔者当时没有接触到Base64隐写的概念，误将多行 base64 编码的字符串进行了2次 base64 批量解码。最终得到了一串带有乱码的C语言代码。直接将解码结果以十六进制展示仍没有解决乱码问题。查询网络后得知Base64隐写的概念，遂有了本文</p><p>使用的脚本如下</p><p><img src="https://s2.loli.net/2023/09/21/l9vKOrbB1yVpuFH.png" alt="base64隐写.png"></p><p>将需要解密的文件复制到工作目录下，重命名为<code>tmp.txt</code>，运行脚本。需要注意的是<strong>需要解密的文件直接使用原文件</strong></p><p><img src="https://s2.loli.net/2023/09/21/R841LgTq6iIVwoW.png" alt="base64隐写_2.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://waltyoung.github.io/tags/CTF/"/>
    
    <category term="Misc" scheme="https://waltyoung.github.io/tags/Misc/"/>
    
    <category term="隐写" scheme="https://waltyoung.github.io/tags/%E9%9A%90%E5%86%99/"/>
    
    <category term="Crypto" scheme="https://waltyoung.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>CTF-Misc-谁赢了比赛</title>
    <link href="https://waltyoung.github.io/2023/09/20/CTF-Misc-%E8%B0%81%E8%B5%A2%E4%BA%86%E6%AF%94%E8%B5%9B/"/>
    <id>https://waltyoung.github.io/2023/09/20/CTF-Misc-%E8%B0%81%E8%B5%A2%E4%BA%86%E6%AF%94%E8%B5%9B/</id>
    <published>2023-09-20T04:06:06.000Z</published>
    <updated>2023-09-20T04:07:21.493Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="CTF-Misc-谁赢了比赛"><a href="#CTF-Misc-谁赢了比赛" class="headerlink" title="CTF-Misc-谁赢了比赛"></a>CTF-Misc-谁赢了比赛</h1><p>原题链接：<a href="https://buuoj.cn/challenges#%E8%B0%81%E8%B5%A2%E4%BA%86%E6%AF%94%E8%B5%9B%EF%BC%9F" title="谁赢了比赛？">https://buuoj.cn/challenges#%E8%B0%81%E8%B5%A2%E4%BA%86%E6%AF%94%E8%B5%9B%EF%BC%9F</a></p><p>笔者拿到该题后，先使用十六进制编辑器确定了图片中存在隐藏文件，使用binwalk <code>binwalk -e who_won_the_game.png --run-as=root</code>提取文件，得到一个 rar 压缩包</p><p><img src="https://s2.loli.net/2023/09/20/7WCXOnBHAEbs2m1.png" alt="谁赢了比赛_1.png"></p><p>由上图可见，压缩包内可见flag.txt 是未被加密的，hehe.gif 是被加密的。flag.txt 中的信息无效</p><p>检查 rar 压缩包的文件头、文件尾</p><p><img src="https://s2.loli.net/2023/09/20/nGvIbRPpEDOFM7s.png" alt="谁赢了比赛_2.png"></p><p>由上图可见，rar 压缩包的文件头（<code>52 61 72 21 1A 07 00</code>）是正常的</p><p><img src="https://s2.loli.net/2023/09/20/zCZtDA8kWOlSqhJ.png" alt="谁赢了比赛_3.png"></p><p>由上图可见，rar 压缩包的文件头（<code>C4 3D 7B 00 40 70 00</code>）是正常的</p><p>在 rar 压缩包的十六进制文本里直接搜索 gif 图片的文件头（<code>47 49 46 38</code>），没有搜索到该文件头，因为<strong>压缩的本质是找出文件中字符串的概率分布，然后将出现概率高的字符串替换成更短的形式</strong>，所以猜测是真加密</p><p>笔者至此没有思路，经网络提醒，还有一种最后的方法——爆破</p><p>优先从4位纯数字开始爆破，幸运地得到了密码</p><p><img src="https://s2.loli.net/2023/09/20/dCXGeYik893FEMI.png" alt="谁赢了比赛_4.png"></p><p>使用密码解压后得到 gif 图片，先使用十六进制编辑器确定了图片中不存在隐藏文件，再置于 Stegsolve ，逐帧检查，在第310帧的时候发现了下图</p><p><img src="https://s2.loli.net/2023/09/20/WKIrXe1Eos4P2V6.png" alt="谁赢了比赛_5.png"></p><p>另存改图为 bmp 文件（<strong>因为bmp 是未经过压缩的图像格式</strong>）</p><p>优先检查有无 LSB隐写，检查结果：无</p><p>但发现 Red 0平面包含了一张二维码，如下图所示</p><p><img src="https://s2.loli.net/2023/09/20/6viJX3BfgmMOKHo.png" alt="谁赢了比赛_6.png"></p><p>直接解码可得flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://waltyoung.github.io/tags/CTF/"/>
    
    <category term="Misc" scheme="https://waltyoung.github.io/tags/Misc/"/>
    
    <category term="隐写" scheme="https://waltyoung.github.io/tags/%E9%9A%90%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>CTF-Misc-来首歌吧</title>
    <link href="https://waltyoung.github.io/2023/09/19/CTF-Misc-%E6%9D%A5%E9%A6%96%E6%AD%8C%E5%90%A7/"/>
    <id>https://waltyoung.github.io/2023/09/19/CTF-Misc-%E6%9D%A5%E9%A6%96%E6%AD%8C%E5%90%A7/</id>
    <published>2023-09-19T05:09:00.000Z</published>
    <updated>2023-09-20T04:19:47.838Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="CTF-Misc-来首歌吧"><a href="#CTF-Misc-来首歌吧" class="headerlink" title="CTF-Misc-来首歌吧"></a>CTF-Misc-来首歌吧</h1><p>原题链接：<a href="https://buuoj.cn/challenges#%E6%9D%A5%E9%A6%96%E6%AD%8C%E5%90%A7" title="来首歌吧">https://buuoj.cn/challenges#%E6%9D%A5%E9%A6%96%E6%AD%8C%E5%90%A7</a></p><p>将 wav 文件置入 <strong>Audicity</strong> ，可观察到左声道特殊</p><p><img src="https://s2.loli.net/2023/09/16/StmTIuXNWnqY1Kb.png" alt="来首歌吧_1.png"></p><p>放大后可见摩斯电码</p><p><img src="https://s2.loli.net/2023/09/16/Lw9KqIu1EvOY26g.png" alt="来首歌吧_2.png"></p><p>逐个对照下表的摩斯电码，可以得到flag</p><p><img src="https://s2.loli.net/2023/09/16/h9J58BbN6DPxMIk.jpg" alt="摩斯电码.jpg"></p><hr><p>本文重点在于介绍另一款音频隐写与提取工具————<strong>MP3Stego</strong></p><p>MP3Stego下载地址：<a href="https://www.petitcolas.net/fabien/software/" title="MP3Stego">https://www.petitcolas.net/fabien/software/</a></p><p>MP3Stego 提供图形化用户界面（即GUI）但为方便日后学习，笔者仍介绍在命令行下的使用方法</p><p>加密命令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Encode -E data.txt -P pass sound.wav sound.mp3</span><br></pre></td></tr></table></figure><p>参数解释</p><ul><li>data.txt:需要加密的txt文件</li><li>pass:密码</li><li>sound.wav:需要将密码放入的wav文件)</li><li>sound.mp3:需要解密的文件</li></ul><p>解密命令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Decode -X -P pass sound.mp3</span><br></pre></td></tr></table></figure><p>参数解释</p><ul><li>pass:密码</li><li>sound.mp3:需要解密的文件</li></ul><p><strong>需要注意的是 MP3Stego 只能分析、处理 MP3 文件</strong>（这也是本题使用不到 MP3Stego 的原因，即使本题的 wav 文件的文件名在诱导我们）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://waltyoung.github.io/tags/CTF/"/>
    
    <category term="Misc" scheme="https://waltyoung.github.io/tags/Misc/"/>
    
    <category term="隐写" scheme="https://waltyoung.github.io/tags/%E9%9A%90%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>CTF-Misc-LSB隐写</title>
    <link href="https://waltyoung.github.io/2023/09/18/CTF-Misc-LSB%E9%9A%90%E5%86%99/"/>
    <id>https://waltyoung.github.io/2023/09/18/CTF-Misc-LSB%E9%9A%90%E5%86%99/</id>
    <published>2023-09-18T03:46:20.000Z</published>
    <updated>2023-09-18T03:47:56.622Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="CTF-Misc-LSB隐写"><a href="#CTF-Misc-LSB隐写" class="headerlink" title="CTF-Misc-LSB隐写"></a>CTF-Misc-LSB隐写</h1><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>MSB（Most Significant Bit）：最高有效位，二进制中代表最高值的比特位，这一位对数值的影响最大</p><p>LSB（Least Significant Bit）：最低有效位，二进制中代表最低值的比特位</p><p>例如，在二进制的1001（十进制的9）中，最左边的“1”即是MSB，最右边的“1”是LSB</p><p>常见CPU采用小端模式（Little-Endian）网络字节顺序采用大端模式（big endian）排序方式，TCP&#x2F;IP协议规定:接收到的第一个字节视作高位字节，这就要求发送端发送的第一个字节是高位字节。<strong>intel x86的CPU使用的是LE（Windows中称为“主机字节序”）,而SocksAddr中使用的则是BE（就是“网络字节序”），所以在使用网络编程时需要使用htns,htnl,nths,nthl来倒字节序</strong></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>图片中的图像像素一般是由RGB三原色（红绿蓝）组成，每一种颜色占用8位，即有256种颜色。LSB隐写就是修改RGB颜色分量的最低二进制位也就是最低有效位（LSB），而人类的眼睛不会注意到这前后的变化</p><h2 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h2><p>隐写的内容不同，主要分为2种：字符和文件</p><p>原题链接：<a href="https://buuoj.cn/challenges#%E9%95%9C%E5%AD%90%E9%87%8C%E9%9D%A2%E7%9A%84%E4%B8%96%E7%95%8C" title="镜子里面的世界">https://buuoj.cn/challenges#%E9%95%9C%E5%AD%90%E9%87%8C%E9%9D%A2%E7%9A%84%E4%B8%96%E7%95%8C</a></p><p>工具： <strong>Stegsolve</strong> </p><p>如下图所示，可见隐写的内容是字符，即flag</p><p><img src="https://s2.loli.net/2023/09/15/LjCUHefJPuD6AgX.png" alt="镜子里面的世界_1.png"></p><hr><p>原题链接：<a href="https://buuoj.cn/challenges#LSB" title="LSB">https://buuoj.cn/challenges#LSB</a></p><p>如下图所示，可见隐写的内容是 png 图片</p><p><img src="https://s2.loli.net/2023/09/15/Ah1C8QGxUsXadqH.png" alt="LSB_1.png"></p><p>将得到的 png 图片（即二维码）解码，解码平台————草料二维码解码器：<a href="https://cli.im/deqr/other" title="草料二维码解码器">https://cli.im/deqr/other</a></p><hr><p>原题链接：<a href="https://buuoj.cn/challenges#FLAG" title="FLAG">https://buuoj.cn/challenges#FLAG</a></p><p>如下图所示，可见隐写的内容是 zip 压缩包（<code>50 4b 03 04</code>和<code>PK</code>的文件头，应及时反应是 zip 压缩包）</p><p><img src="https://s2.loli.net/2023/09/15/z1BGXYsxC2T6r5e.png" alt="FLAG_1.png"></p><p><strong>需要注意的是 0平面 可能隐写内容，1平面 也可能隐写内容</strong></p><p>参考链接：<a href="https://zhuanlan.zhihu.com/p/461716971" title="浅谈LSB隐写解题与出题">https://zhuanlan.zhihu.com/p/461716971</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://waltyoung.github.io/tags/CTF/"/>
    
    <category term="Misc" scheme="https://waltyoung.github.io/tags/Misc/"/>
    
    <category term="隐写" scheme="https://waltyoung.github.io/tags/%E9%9A%90%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>CTF-Misc-N种方法解决</title>
    <link href="https://waltyoung.github.io/2023/09/17/CTF-Misc-N%E7%A7%8D%E6%96%B9%E6%B3%95%E8%A7%A3%E5%86%B3/"/>
    <id>https://waltyoung.github.io/2023/09/17/CTF-Misc-N%E7%A7%8D%E6%96%B9%E6%B3%95%E8%A7%A3%E5%86%B3/</id>
    <published>2023-09-16T16:15:27.000Z</published>
    <updated>2023-09-16T16:16:56.962Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="CTF-Misc-N种方法解决"><a href="#CTF-Misc-N种方法解决" class="headerlink" title="CTF-Misc-N种方法解决"></a>CTF-Misc-N种方法解决</h1><p>原题链接：<a href="https://buuoj.cn/challenges#N%E7%A7%8D%E6%96%B9%E6%B3%95%E8%A7%A3%E5%86%B3" title="N种方法解决">https://buuoj.cn/challenges#N%E7%A7%8D%E6%96%B9%E6%B3%95%E8%A7%A3%E5%86%B3</a></p><p>本题如题名有N种方法解决</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>使用十六进制编辑器打开文件，可见 base64 编码的字符</p><p><img src="https://s2.loli.net/2023/09/16/9BgidRnlHkDTJ4C.png" alt="N种方法解决_1.1.png"></p><p>文件尾也符合 base64 编码的特征，故将其间一整段字符使用 base64 解码。</p><p><img src="https://s2.loli.net/2023/09/16/6XtxJCQELD2fngq.png" alt="N种方法解决_1.2.png"></p><p><strong>需要注意的是 base64 解码的结果必须直接以十六进制展示，不能将 base64 解码得到的乱码复制到十六进制编辑器再计算其十六进制（后者的操作将导致数据不完整）</strong></p><p>下图是正确解码的结果</p><p><img src="https://s2.loli.net/2023/09/16/7nK514ty3eaOHoA.png" alt="N种方法解决_1.3.png"></p><p>复制结果，保存为 png 图片（<code>89 50 4E 47</code>是 PNG 的文件头）</p><p>得到一张二维码，置于草料二维码解码器<a href="https://cli.im/deqr/other" title="草料二维码解码器">https://cli.im/deqr/other</a>解码</p><hr><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>PHP 内置很多 URL 风格的封装协议，可用于类似 fopen()、 copy()、 file_exists() 和 filesize() 的文件系统函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">file:<span class="comment">// — 访问本地文件系统</span></span><br><span class="line">http:<span class="comment">// — 访问 HTTP(s) 网址</span></span><br><span class="line">ftp:<span class="comment">// — 访问 FTP(s) URLs</span></span><br><span class="line">php:<span class="comment">// — 访问各个输入/输出流（I/O streams）</span></span><br><span class="line">zlib:<span class="comment">// — 压缩流</span></span><br><span class="line">data:<span class="comment">// — 数据（RFC 2397）</span></span><br><span class="line">glob:<span class="comment">// — 查找匹配的文件路径模式</span></span><br><span class="line">phar:<span class="comment">// — PHP 归档</span></span><br><span class="line">ssh2:<span class="comment">// — Secure Shell 2</span></span><br><span class="line">rar:<span class="comment">// — RAR</span></span><br><span class="line">ogg:<span class="comment">// — 音频流</span></span><br><span class="line">expect:<span class="comment">// — 处理交互式的流</span></span><br></pre></td></tr></table></figure><p>如下图所示，这是 PHP 伪协议的例子</p><p><img src="https://s2.loli.net/2023/09/16/NltSmE5exIipaOn.png" alt="N种方法解决_2.0.png"></p><p>本题中存在类似的 PHP 伪协议</p><p><img src="https://s2.loli.net/2023/09/16/4a2Qw3xUTNrCJz7.png" alt="N种方法解决_2.1.png"></p><p>直接将十六进制的字符复制到浏览器</p><p><img src="https://s2.loli.net/2023/09/16/tvlUh5TbQ93RP4j.png" alt="N种方法解决_2.2.png"></p><p>得到一张二维码，置于草料二维码解码器<a href="https://cli.im/deqr/other" title="草料二维码解码器">https://cli.im/deqr/other</a>解码</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://waltyoung.github.io/tags/CTF/"/>
    
    <category term="Misc" scheme="https://waltyoung.github.io/tags/Misc/"/>
    
    <category term="隐写" scheme="https://waltyoung.github.io/tags/%E9%9A%90%E5%86%99/"/>
    
  </entry>
  
</feed>
