<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CTF-Misc-LSB隐写</title>
      <link href="/2023/09/18/CTF-Misc-LSB%E9%9A%90%E5%86%99/"/>
      <url>/2023/09/18/CTF-Misc-LSB%E9%9A%90%E5%86%99/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="CTF-Misc-LSB隐写"><a href="#CTF-Misc-LSB隐写" class="headerlink" title="CTF-Misc-LSB隐写"></a>CTF-Misc-LSB隐写</h1><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>MSB（Most Significant Bit）：最高有效位，二进制中代表最高值的比特位，这一位对数值的影响最大</p><p>LSB（Least Significant Bit）：最低有效位，二进制中代表最低值的比特位</p><p>例如，在二进制的1001（十进制的9）中，最左边的“1”即是MSB，最右边的“1”是LSB</p><p>常见CPU采用小端模式（Little-Endian）网络字节顺序采用大端模式（big endian）排序方式，TCP&#x2F;IP协议规定:接收到的第一个字节视作高位字节，这就要求发送端发送的第一个字节是高位字节。<strong>intel x86的CPU使用的是LE（Windows中称为“主机字节序”）,而SocksAddr中使用的则是BE（就是“网络字节序”），所以在使用网络编程时需要使用htns,htnl,nths,nthl来倒字节序</strong></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>图片中的图像像素一般是由RGB三原色（红绿蓝）组成，每一种颜色占用8位，即有256种颜色。LSB隐写就是修改RGB颜色分量的最低二进制位也就是最低有效位（LSB），而人类的眼睛不会注意到这前后的变化</p><h2 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h2><p>隐写的内容不同，主要分为2种：字符和文件</p><p>原题链接：<a href="https://buuoj.cn/challenges#%E9%95%9C%E5%AD%90%E9%87%8C%E9%9D%A2%E7%9A%84%E4%B8%96%E7%95%8C" title="镜子里面的世界">https://buuoj.cn/challenges#%E9%95%9C%E5%AD%90%E9%87%8C%E9%9D%A2%E7%9A%84%E4%B8%96%E7%95%8C</a></p><p>工具： <strong>Stegsolve</strong> </p><p>如下图所示，可见隐写的内容是字符，即flag</p><p><img src="https://s2.loli.net/2023/09/15/LjCUHefJPuD6AgX.png" alt="镜子里面的世界_1.png"></p><hr><p>原题链接：<a href="https://buuoj.cn/challenges#LSB" title="LSB">https://buuoj.cn/challenges#LSB</a></p><p>如下图所示，可见隐写的内容是 png 图片</p><p><img src="https://s2.loli.net/2023/09/15/Ah1C8QGxUsXadqH.png" alt="LSB_1.png"></p><p>将得到的 png 图片（即二维码）解码，解码平台————草料二维码解码器：<a href="https://cli.im/deqr/other" title="草料二维码解码器">https://cli.im/deqr/other</a></p><hr><p>原题链接：<a href="https://buuoj.cn/challenges#FLAG" title="FLAG">https://buuoj.cn/challenges#FLAG</a></p><p>如下图所示，可见隐写的内容是 zip 压缩包（<code>50 4b 03 04</code>和<code>PK</code>的文件头，应及时反应是 zip 压缩包）</p><p><img src="https://s2.loli.net/2023/09/15/z1BGXYsxC2T6r5e.png" alt="FLAG_1.png"></p><p><strong>需要注意的是 0平面 可能隐写内容，1平面 也可能隐写内容</strong></p><p>参考链接：<a href="https://zhuanlan.zhihu.com/p/461716971" title="浅谈LSB隐写解题与出题">https://zhuanlan.zhihu.com/p/461716971</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Misc </tag>
            
            <tag> 隐写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-Misc-N种方法解决</title>
      <link href="/2023/09/17/CTF-Misc-N%E7%A7%8D%E6%96%B9%E6%B3%95%E8%A7%A3%E5%86%B3/"/>
      <url>/2023/09/17/CTF-Misc-N%E7%A7%8D%E6%96%B9%E6%B3%95%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="CTF-Misc-N种方法解决"><a href="#CTF-Misc-N种方法解决" class="headerlink" title="CTF-Misc-N种方法解决"></a>CTF-Misc-N种方法解决</h1><p>原题链接：<a href="https://buuoj.cn/challenges#N%E7%A7%8D%E6%96%B9%E6%B3%95%E8%A7%A3%E5%86%B3" title="N种方法解决">https://buuoj.cn/challenges#N%E7%A7%8D%E6%96%B9%E6%B3%95%E8%A7%A3%E5%86%B3</a></p><p>本题如题名有N种方法解决</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>使用十六进制编辑器打开文件，可见 base64 编码的字符</p><p><img src="https://s2.loli.net/2023/09/16/9BgidRnlHkDTJ4C.png" alt="N种方法解决_1.1.png"></p><p>文件尾也符合 base64 编码的特征，故将其间一整段字符使用 base64 解码。</p><p><img src="https://s2.loli.net/2023/09/16/6XtxJCQELD2fngq.png" alt="N种方法解决_1.2.png"></p><p><strong>需要注意的是 base64 解码的结果必须直接以十六进制展示，不能将 base64 解码得到的乱码复制到十六进制编辑器再计算其十六进制（后者的操作将导致数据不完整）</strong></p><p>下图是正确解码的结果</p><p><img src="https://s2.loli.net/2023/09/16/7nK514ty3eaOHoA.png" alt="N种方法解决_1.3.png"></p><p>复制结果，保存为 png 图片（<code>89 50 4E 47</code>是 PNG 的文件头）</p><p>得到一张二维码，置于草料二维码解码器<a href="https://cli.im/deqr/other" title="草料二维码解码器">https://cli.im/deqr/other</a>解码</p><hr><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>PHP 内置很多 URL 风格的封装协议，可用于类似 fopen()、 copy()、 file_exists() 和 filesize() 的文件系统函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">file:<span class="comment">// — 访问本地文件系统</span></span><br><span class="line">http:<span class="comment">// — 访问 HTTP(s) 网址</span></span><br><span class="line">ftp:<span class="comment">// — 访问 FTP(s) URLs</span></span><br><span class="line">php:<span class="comment">// — 访问各个输入/输出流（I/O streams）</span></span><br><span class="line">zlib:<span class="comment">// — 压缩流</span></span><br><span class="line">data:<span class="comment">// — 数据（RFC 2397）</span></span><br><span class="line">glob:<span class="comment">// — 查找匹配的文件路径模式</span></span><br><span class="line">phar:<span class="comment">// — PHP 归档</span></span><br><span class="line">ssh2:<span class="comment">// — Secure Shell 2</span></span><br><span class="line">rar:<span class="comment">// — RAR</span></span><br><span class="line">ogg:<span class="comment">// — 音频流</span></span><br><span class="line">expect:<span class="comment">// — 处理交互式的流</span></span><br></pre></td></tr></table></figure><p>如下图所示，这是 PHP 伪协议的例子</p><p><img src="https://s2.loli.net/2023/09/16/NltSmE5exIipaOn.png" alt="N种方法解决_2.0.png"></p><p>本题中存在类似的 PHP 伪协议</p><p><img src="https://s2.loli.net/2023/09/16/4a2Qw3xUTNrCJz7.png" alt="N种方法解决_2.1.png"></p><p>直接将十六进制的字符复制到浏览器</p><p><img src="https://s2.loli.net/2023/09/16/tvlUh5TbQ93RP4j.png" alt="N种方法解决_2.2.png"></p><p>得到一张二维码，置于草料二维码解码器<a href="https://cli.im/deqr/other" title="草料二维码解码器">https://cli.im/deqr/other</a>解码</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Misc </tag>
            
            <tag> 隐写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-Misc-另外一个世界</title>
      <link href="/2023/09/16/CTF-Misc-%E5%8F%A6%E5%A4%96%E4%B8%80%E4%B8%AA%E4%B8%96%E7%95%8C/"/>
      <url>/2023/09/16/CTF-Misc-%E5%8F%A6%E5%A4%96%E4%B8%80%E4%B8%AA%E4%B8%96%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="CTF-Misc-另外一个世界"><a href="#CTF-Misc-另外一个世界" class="headerlink" title="CTF-Misc-另外一个世界"></a>CTF-Misc-另外一个世界</h1><p>原题链接：<a href="https://buuoj.cn/challenges#%E5%8F%A6%E5%A4%96%E4%B8%80%E4%B8%AA%E4%B8%96%E7%95%8C" title="另外一个世界">https://buuoj.cn/challenges#%E5%8F%A6%E5%A4%96%E4%B8%80%E4%B8%AA%E4%B8%96%E7%95%8C</a></p><p>笔者在做该题时，首先尝试了 Stegsolve，没有获得有效信息，然后打开了十六进制编辑器，在文件末尾发现了一段可疑的二进制序列。（需要注意的是查看文件的十六进制时，不仅需要关注到文件的头尾，而且在没有思路的时候需要关注到文件的中间部分，可能遗漏信息）</p><p><img src="https://s2.loli.net/2023/09/15/6FMyEBNQfTOglax.png" alt="另外一个世界_1.png"></p><p>笔者没有思路，选择了看 wp (writeup)<em>(笔者太笨了QAQ)</em></p><p>二进制序列以8位为一组，转换为十进制，再对照 ASCII 码表得出字符，最后以flag格式提交</p><p><img src="https://s2.loli.net/2023/09/15/9uqXYGHoKfIBaL2.png" alt="另外一个世界_2.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Misc </tag>
            
            <tag> 隐写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-Misc-zip伪加密</title>
      <link href="/2023/09/15/CTF-Misc-zip%E4%BC%AA%E5%8A%A0%E5%AF%86/"/>
      <url>/2023/09/15/CTF-Misc-zip%E4%BC%AA%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="CTF-Misc-zip伪加密"><a href="#CTF-Misc-zip伪加密" class="headerlink" title="CTF-Misc-zip伪加密"></a>CTF-Misc-zip伪加密</h1><p>原题链接：<a href="https://buuoj.cn/challenges#zip%E4%BC%AA%E5%8A%A0%E5%AF%86">https://buuoj.cn/challenges#zip%E4%BC%AA%E5%8A%A0%E5%AF%86</a></p><p>一个 ZIP 文件由三个部分组成：</p><p>压缩源文件数据区+压缩源文件目录区+压缩源文件目录结束标志</p><p><strong>zip伪加密是在文件头的加密标志位做修改，进而再打开文件时识被别为加密压缩包</strong>。</p><p><strong>压缩源文件数据区</strong>：</p><ul><li><strong>50 4B 03 04</strong>：这是头文件标记（0x04034b50），十六进制表示为<strong>PK</strong></li><li>14 00：解压文件所需 pkware 版本</li><li><strong>09 00</strong>：全局方式位标记（有无加密）</li><li>08 00：压缩方式</li><li>50 A3：最后修改文件时间</li><li>A5 4A：最后修改文件日期</li><li>21 38 76 64：CRC-32校验（1480B516）</li><li>19 00 00 00：压缩后尺寸（25）</li><li>17 00 00 00：未压缩尺寸（23）</li><li>08 00：文件名长度</li><li>00 00：扩展记录长度</li></ul><p><strong>压缩源文件目录区</strong>:</p><ul><li>50 4B 01 02：目录中文件文件头标记(0x02014b50)</li><li>1F 00：压缩使用的 pkware 版本</li><li>14 00：解压文件所需 pkware 版本</li><li>09 00：全局方式位标记（有无加密，这个更改这里进行伪加密，改为09 00打开就会提示有密码了）</li><li>08 00：压缩方式</li><li>50 A3：最后修改文件时间</li><li>A5 4A：最后修改文件日期</li><li>21 38 76 65：CRC-32校验（1480B516）</li><li>19 00 00 00：压缩后尺寸（25）</li><li>17 00 00 00：未压缩尺寸（23）</li><li>08 00：文件名长度</li><li>24 00：扩展字段长度</li><li>00 00：文件注释长度</li><li>00 00：磁盘开始号</li><li>00 00：内部文件属性</li><li>20 00 00 00：外部文件属性</li><li>00 00 00 00：局部头部偏移量</li></ul><p><strong>压缩源文件目录结束标志</strong>:</p><ul><li>50 4B 05 06：目录结束标记</li><li>00 00：当前磁盘编号</li><li>00 00：目录区开始磁盘编号</li><li>01 00：本磁盘上纪录总数</li><li>01 00：目录区中纪录总数</li><li>5A 00 00 00：目录区尺寸大小</li><li>3F 00 00 00：目录区对第一张磁盘的偏移量</li><li>00 00 00：ZIP 文件注释长度</li></ul><p><strong>无加密</strong><br>压缩源文件数据区的全局加密应当为<code>00 00</code><br>且压缩源文件目录区的全局方式位标记应当为<code>00 00</code></p><p><strong>假加密</strong><br>压缩源文件数据区的全局加密应当为<code>00 00</code><br>且压缩源文件目录区的全局方式位标记应当为<code>09 00</code></p><p><strong>真加密</strong><br>压缩源文件数据区的全局加密应当为<code>09 00</code><br>且压缩源文件目录区的全局方式位标记应当为<code>09 00</code></p><p>这是题目的原文件的十六进制</p><p><img src="https://s2.loli.net/2023/09/14/4dOImnfhrQi3cvo.jpg" alt="伪加密_1.jpg"></p><p>对照上文，将<code>09 00</code><em>全部</em>修改为<code>00 00</code>，再次解压可得flag</p><p>参考链接：<a href="https://blog.csdn.net/qq_32350719/article/details/102661596" title="CTF-伪加密">https://blog.csdn.net/qq_32350719&#x2F;article&#x2F;details&#x2F;102661596</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NTFS交换数据流隐藏文件</title>
      <link href="/2023/09/14/NTFS%E4%BA%A4%E6%8D%A2%E6%95%B0%E6%8D%AE%E6%B5%81%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6/"/>
      <url>/2023/09/14/NTFS%E4%BA%A4%E6%8D%A2%E6%95%B0%E6%8D%AE%E6%B5%81%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="NTFS交换数据流隐藏文件"><a href="#NTFS交换数据流隐藏文件" class="headerlink" title="NTFS交换数据流隐藏文件"></a>NTFS交换数据流隐藏文件</h1><blockquote><p>NTFS交换数据流（Alternate Data Streams，简称ADS）是NTFS磁盘格式的一个特性，在NTFS文件系统下，每个文件都可以存在多个数据流，就是说除了主文件流之外还可以有许多非主文件流寄宿在主文件流中，而我们无法看到非主文件的数据流。它使用资源派生来维持与文件相关的信息。<strong>在Windows下，文件名带有<code>:</code>的文件被视为NTFS流的非主文流，类似 Linux 的 swap 文件</strong>。</p></blockquote><p>将 123 写入到 NTFS_demo.txt:1.txt 文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 123 &gt; NTFS_demo.txt:1.txt</span><br></pre></td></tr></table></figure><p>此时在文件中可见产生了一个 NTFS_demo.txt 文件，打开 NTFS_demo.txt 文件，可见是空白的</p><p><img src="https://s2.loli.net/2023/09/14/rqV57Fh1QXbJiUc.png" alt="demo.txt.png"></p><p>使用 notepad 命令打开 NTFS_demo.txt:1.txt 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notepad NTFS_demo.txt:1.txt</span><br></pre></td></tr></table></figure><p>notepad 命令将唤起记事本，可见输入内容“123”</p><p><img src="https://s2.loli.net/2023/09/14/1s9DCnw4vtNpr6U.png" alt="1.txt.png"></p><p>参考链接：<a href="https://www.qingsword.com/qing/812.html" title="利用NTFS交换数据流隐藏文件">https://www.qingsword.com/qing/812.html</a></p><p>如何检测和清除NTFS-ADS隐藏的文件：</p><ol><li>对于压缩包类文件，可以使用压缩软件打开，在压缩软件中查看所需内容；也可以在Linux中直接解压该文件</li><li>合理利用工具，NTFS交换数据流检测工具的下载地址：<a href="https://waltyoung-music-1317864421.cos.ap-shanghai.myqcloud.com/tools/NTFS%E4%BA%A4%E6%8D%A2%E6%95%B0%E6%8D%AE%E6%B5%81%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7.rar">https://waltyoung-music-1317864421.cos.ap-shanghai.myqcloud.com/tools/NTFS%E4%BA%A4%E6%8D%A2%E6%95%B0%E6%8D%AE%E6%B5%81%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7.rar</a></li></ol><hr><p>需要注意的是，type命令执行 NTFS_demo.txt 文件和 NTFS_demo.txt:1.txt 文件的结果是不同的</p><p><code>type NTFS_demo.txt</code>命令执行结果为空（因为NTFS_demo.txt文件中没有内容）</p><p><code>type NTFS_demo.txt:1.txt</code>命令执行结果如下所示</p><p><img src="https://s2.loli.net/2023/09/14/A9CjBwLT7Okgq6H.png" alt="type命令执行不同文件.png"></p><p>echo 命令和 type 命令存在显著差异</p><p>echo 命令是将字符写入到文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 456 &gt;&gt; NTFS_demo.txt:1.txt</span><br></pre></td></tr></table></figure><p>type 命令是将已存在的文件用交换数据流的方式写到另外一个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> 456.txt &gt;&gt; NTFS_demo.txt:1.txt</span><br></pre></td></tr></table></figure><p>注：“&gt;&gt;”是追加重定向符号，与”&gt;”类似，但是会将命令的输出追加到文件的末尾，而不是覆盖文件内容。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Misc </tag>
            
            <tag> 隐写 </tag>
            
            <tag> OS </tag>
            
            <tag> Forensics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次一句话木马的探索</title>
      <link href="/2023/09/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC%E7%9A%84%E6%8E%A2%E7%B4%A2/"/>
      <url>/2023/09/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC%E7%9A%84%E6%8E%A2%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="记一次一句话木马的探索"><a href="#记一次一句话木马的探索" class="headerlink" title="记一次一句话木马的探索"></a>记一次一句话木马的探索</h1><p>笔者在做CTF题时，发现了未曾见过的一句话木马<code>┼攠數畣整爠煥敵瑳∨≡┩愾</code>，就此展开探索</p><p>由网络可知<strong>这是ANSI 转 Unicode编码的 access 木马</strong></p><p>ANSI是一种字符代码，对于不同语言来说，ANSI对应的编码是不同的</p><ul><li>在中文系统中，使用ANSI保存，编码集是 GBK（MS936）</li><li>在日文系统中，使用ANSI保存，编码集是 Shift_JIS（MS932）</li></ul><p>在CMD中可以使用<code>chcp</code>命令查看Windows当前的页面编码集，编码集根据时区选择。页面编码936在Win95及之前表示GB2312，在Win95之后表示GBK，需要注明的是GBK 包括了 GB2312 的所有内容，同时又增加了近20000个新的汉字（包括繁体字）和符号。参考链接：<a href="https://blog.csdn.net/sxzlc/article/details/106203495" title="文件编码 ANSI、GBK、GB2312、MS936、MS932、SJIS、Windows-31 、EUC-JP 、EBCDIC 等等之间的区别与联系">https://blog.csdn.net/sxzlc/article/details/106203495</a>这里提供查询页面编码的网址<a href="https://blog.csdn.net/sxzlc/article/details/106270405" title="windows中，页面编码集一览 （chcp code）">https://blog.csdn.net/sxzlc/article/details/106270405</a></p><blockquote><p>UTF-16是一种编码方式，用于将Unicode字符转换为二进制数据。在UTF-16中，每个字符通常占用2个字节。</p><p>由于计算机存储数据的方式有两种：Big Endian（大端存储，高位低地址、低位高地址）和<strong>Little Endian（小端存储，低位低地址、高位高地址）</strong>，因此在使用UTF-16编码时，需要通过在文件开头添加一个特殊字符来指示文件是使用Big Endian还是Little Endian的方式存储数据。这个特殊字符就是BOM（Byte Order Mark），它是一个Unicode字符，其编码为U+FEFF。</p><p><strong>在 Windows 平台下，默认的Unicode编码为UTF-16 Little Endian</strong>，所以在UTF-16编码的文件开头会添加一个BOM字符（U+FEFF），以表示文件是以Little Endian方式存储数据。这个BOM字符在文件中的作用是告诉解码器如何正确地解析文件中的字符数据。</p></blockquote><p>通过将木马复制粘贴到记事本，另存为5种不同编码方式的文件(ANSI、UTF-8、带有BOM的UTF-8、UTF-16 Big Endian、UTF-16 Little Endian)，再使用十六进制查看</p><p><img src="https://s2.loli.net/2023/09/13/b4VIw8pOzBrnJWg.png" alt="UTF-16 Little Endian编码.png"></p><p>由图可见，在UTF-16 Little Endian编码下可见正常的文字——<code>&lt;% execute request(&quot;a&quot;)%&gt;</code></p><p>此处收集常见的一句话木马：</p><ol><li><a href="https://blog.csdn.net/forest_fire/article/details/50944437" title="收集一些常见的webshell后门的特征码">https://blog.csdn.net/forest_fire&#x2F;article&#x2F;details&#x2F;50944437</a></li><li><a href="https://www.cnblogs.com/goodgad/p/13463866.html" title="常见的一句话木马">https://www.cnblogs.com/goodgad/p/13463866.html</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 记一次XXX </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次开发过程中根据抓包和Request-Id（日志）排错</title>
      <link href="/2023/09/12/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E6%A0%B9%E6%8D%AE%E6%8A%93%E5%8C%85%E5%92%8CRequest-Id%EF%BC%88%E6%97%A5%E5%BF%97%EF%BC%89%E6%8E%92%E9%94%99/"/>
      <url>/2023/09/12/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E6%A0%B9%E6%8D%AE%E6%8A%93%E5%8C%85%E5%92%8CRequest-Id%EF%BC%88%E6%97%A5%E5%BF%97%EF%BC%89%E6%8E%92%E9%94%99/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="记一次开发过程中根据抓包和Request-Id（日志）排错"><a href="#记一次开发过程中根据抓包和Request-Id（日志）排错" class="headerlink" title="记一次开发过程中根据抓包和Request-Id（日志）排错"></a>记一次开发过程中根据抓包和Request-Id（日志）排错</h1><p>笔者正在为<a href="https://waltyoung.github.io/movies/">https://waltyoung.github.io/movies/</a>嵌入视频播放器，而后发现他人视频的URL有效，可以正常播放视频，但自己视频的URL无法正常播放视频，就此展开排错。</p><p>首先，笔者花费数个小时排除代码问题</p><p>其次，笔者又花费许久排除URL的问题（即腾讯云上存储的文件访问权限的问题）</p><p>再次，笔者又排除了网络环境问题（笔者确实发现网络环境不健康，但不是主要问题）</p><p>最后，笔者才考虑到抓包重新定位问题（笔者太笨了QAQ）</p><p>笔者的音乐和视频都存储在腾讯云上，但是笔者的音乐播放器正常工作，视频播放器未正常工作，所以对于二者分别抓包再做比较</p><p>笔者分析了抓包结果，发现以下两点：</p><ol><li>返回码不同</li><li>腾讯云的自定义头的字段存在较大区别</li></ol><p>针对第一点（返回码不同），视频播放器的返回码是206，笔者搜索、学习了返回码206代表的含义。HTTP <code>206 Partial Content</code>成功状态响应代码指示请求已成功并且主体包含所请求的数据区间，该数据区间是在请求的 Range 字段指定的。<strong>可以简单地理解为返回码206是请求视频等大资源时的特定的返回码</strong>，因为用户不可能等待视频的完整传输完成，事实情况也是视频边下边播</p><p>针对第二点（腾讯云的自定义头的字段存在较大区别），二者的<code>X-Cos-Request-Id</code>值不同，并且未正常工作的视频播放器多一个<code>X-Cos-Trace-Id</code>字段</p><p><img src="https://s2.loli.net/2023/09/12/BMFcPgZ84LQVvm9.png" alt="X-Cos-Trace-Id.png"></p><p>腾讯云上对于<code>X-Cos-Request-Id</code>和<code>X-Cos-Trace-Id</code>的解释如下</p><p><img src="https://s2.loli.net/2023/09/12/uLjkTCMd5Yb73Z4.png" alt="X-Cos-Request-Id和X-Cos-Trace-Id的解释.png"></p><p>根据解释，笔者想到腾讯云的日志也可以帮助分析问题（笔者没有找到腾讯云对象存储服务的日志，但是找到了自助诊断工具）</p><p><img src="https://s2.loli.net/2023/09/12/lNuHmS31z2pfB5U.png" alt="自助诊断工具.png"></p><p>如图所示，找到跨域访问设置，解决问题</p><p><img src="https://s2.loli.net/2023/09/12/ZFHJwI3SNkdlKX5.png" alt="跨域访问设置.png"></p><blockquote><p><strong>总结</strong>：</p><p>从想到抓包至问题解决，只用了不到一个小时，远低于排除代码、文件权限问题的耗时，所以选择合适合理的方法定位、分析问题非常重要。当然，无关问题的排除也很重要</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 成长 </tag>
            
            <tag> 记一次XXX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WHERE、CHECK、HAVING的区别</title>
      <link href="/2023/09/07/WHERE%E3%80%81CHECK%E3%80%81HAVING%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2023/09/07/WHERE%E3%80%81CHECK%E3%80%81HAVING%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="WHERE、CHECK、HAVING的区别"><a href="#WHERE、CHECK、HAVING的区别" class="headerlink" title="WHERE、CHECK、HAVING的区别"></a>WHERE、CHECK、HAVING的区别</h1><p>在T-SQL语言中，WHERE、CHECK、HAVING都是用于筛选数据的关键字，但它们的使用场景和作用略有不同。</p><ol><li>WHERE：WHERE用于在SELECT、UPDATE、DELETE等语句中筛选数据，它是一个过滤器，可以根据指定的条件从表中选择符合条件的记录。WHERE子句可以包含多个条件，多个条件之间可以使用AND或OR进行连接。<strong>WHERE子句不能使用聚合函数</strong>。**常见的聚合函数如下：count()、sum()、avg()、min()、max()**。</li><li>CHECK：CHECK用于在创建表时定义列的约束条件，它可以限制列中的数据必须满足指定的条件。例如，可以使用CHECK约束限制某个列的取值范围、数据类型、长度等。CHECK约束可以在创建表时定义，也可以在ALTER TABLE语句中添加。</li><li>HAVING：HAVING用于在GROUP BY子句中筛选数据，它是一个过滤器，可以根据指定的条件从分组后的结果集中选择符合条件的记录。HAVING子句可以包含多个条件，多个条件之间可以使用AND或OR进行连接。</li></ol><p>总的来说，WHERE用于在SELECT、UPDATE、DELETE等语句中筛选数据，CHECK用于在创建表时定义列的约束条件；HAVING用于在GROUP BY子句中筛选数据，HAVING必须写在GROUP BY之后，例<code>GROUP BY kind HAVING num &gt; 3</code>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 每天一个小知识点 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WHERE子句可后接的关键字</title>
      <link href="/2023/09/06/WHERE%E5%AD%90%E5%8F%A5%E5%8F%AF%E5%90%8E%E6%8E%A5%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2023/09/06/WHERE%E5%AD%90%E5%8F%A5%E5%8F%AF%E5%90%8E%E6%8E%A5%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>WHERE子句可以后接以下关键字</strong>：</p><ol><li>AND：用于连接多个条件，要求同时满足所有条件。</li><li>OR：用于连接多个条件，只要满足其中一个条件即可。</li><li>NOT：用于否定一个条件。</li><li>IN：用于指定一个范围，判断某个值是否在这个范围内。</li><li>BETWEEN：用于指定一个范围，判断某个值是否在这个范围内。</li><li>LIKE：用于模糊匹配，判断某个值是否符合指定的模式。</li><li>IS NULL：用于判断某个值是否为空。</li><li>EXISTS：用于判断子查询是否返回结果。</li><li>ANY&#x2F;SOME：用于判断某个值是否与子查询中的任意一个值相等。</li><li>ALL：用于判断某个值是否与子查询中的所有值都相等。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 每天一个小知识点 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LEFT JOIN与JOIN的区别</title>
      <link href="/2023/09/05/LEFT-JOIN%E4%B8%8EJOIN%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2023/09/05/LEFT-JOIN%E4%B8%8EJOIN%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="LEFT-JOIN与JOIN的区别"><a href="#LEFT-JOIN与JOIN的区别" class="headerlink" title="LEFT JOIN与JOIN的区别"></a>LEFT JOIN与JOIN的区别</h1><p>在SQL中，JOIN是连接两个或多个表的操作，而LEFT JOIN是其中一种JOIN的类型。</p><p>JOIN操作会返回两个表中匹配的行，如果两个表中没有匹配的行，则不会返回任何结果。而LEFT JOIN操作会返回左表中的所有行，即使在右表中没有匹配的行，左表中的行也会被返回，右表中没有匹配的列则会用NULL填充。</p><p>举个例子，假设有两个表A和B，A表中有3行数据，B表中有2行数据，其中一行数据的ID与A表中的一行数据的ID相同，另一行数据的ID与A表中的任何一行数据的ID都不相同。使用JOIN操作，只会返回一行数据，即A表中ID与B表中ID相同的那行数据。而使用LEFT JOIN操作，则会返回A表中的所有3行数据，其中一行数据与B表中的那行数据匹配，另外两行数据的B表中的列则会用NULL填充。</p><p>因此，LEFT JOIN操作可以保证左表中的所有数据都会被返回，即使在右表中没有匹配的数据。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 每天一个小知识点 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PKCS5padding和PKCS7padding的区别</title>
      <link href="/2023/09/04/PKCS5padding%E5%92%8CPKCS7padding%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2023/09/04/PKCS5padding%E5%92%8CPKCS7padding%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="PKCS5padding和PKCS7padding的区别"><a href="#PKCS5padding和PKCS7padding的区别" class="headerlink" title="PKCS5padding和PKCS7padding的区别"></a>PKCS5padding和PKCS7padding的区别</h1><p>PKCS5padding和PKCS7padding（PKCS7padding是PKCS#7填充的简称，PKCS#7是密码学标准PKCS（Public Key Cryptography Standards）中定义的填充方案，用于在加密算法中对数据进行填充。）是两种常见的填充方案，用于在加密前将数据块的大小调整为加密算法所要求的固定大小。它们在填充字节的值和填充方式上有一些区别。</p><p><strong>PKCS5padding</strong>：</p><ul><li>填充字节的值等于需要填充的字节数。</li><li>如果需要填充的字节数为n，则填充n个字节，每个字节的值为n。</li><li>例如，如果需要填充2个字节，那么填充的字节为0x02 0x02。</li></ul><p><strong>PKCS7padding</strong>：</p><ul><li>填充字节的值等于需要填充的字节数。</li><li>如果需要填充的字节数为n，则填充n个字节，每个字节的值为n。</li><li>与PKCS5padding的区别在于，PKCS7padding可以用于任意块大小的加密算法，而不仅限于PKCS5padding的8字节块大小。</li><li>例如，如果需要填充2个字节，那么填充的字节为0x02 0x02。</li></ul><p>总结：PKCS5padding和PKCS7padding在填充字节的值和填充方式上略有不同，但<strong>在实际应用中，它们通常可以互相替换使用</strong>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 每天一个小知识点 </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UEFI和BIOS的区别</title>
      <link href="/2023/09/03/UEFI%E5%92%8CBIOS%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2023/09/03/UEFI%E5%92%8CBIOS%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="UEFI和BIOS的区别"><a href="#UEFI和BIOS的区别" class="headerlink" title="UEFI和BIOS的区别"></a>UEFI和BIOS的区别</h1><p>UEFI（统一的可扩展固件接口）和BIOS（基本输入&#x2F;输出系统）都是计算机的固件接口，用于启动和管理计算机的硬件和软件。</p><p>BIOS是一种旧的固件接口，它是在计算机启动时首先加载的。它负责初始化和检测计算机的硬件设备，例如处理器、内存、硬盘等，并将控制权交给操作系统。BIOS还包含一个小型的操作系统，称为CMOS（可编程只读存储器），用于存储计算机的基本设置，例如日期、时间、启动顺序等。</p><blockquote><p>UEFI是一种更新的固件接口，它取代了传统的BIOS。UEFI提供了更先进的功能和更好的兼容性。与BIOS相比，UEFI具有以下优势：</p><ol><li>容量更大：UEFI支持更大的固件容量，可以容纳更多的功能和驱动程序。</li><li>启动速度更快：UEFI的启动速度比BIOS更快，因为它在启动时不需要进行硬件初始化和自检。</li><li>更好的兼容性：UEFI可以更好地与现代操作系统和硬件设备兼容，支持更多的文件系统和硬件接口。</li><li>图形界面：UEFI提供了一个图形界面，使用户可以更直观地设置计算机的启动选项和其他设置。</li></ol></blockquote><p>总的来说，UEFI是一种更先进、更灵活和更可扩展的固件接口，它取代了传统的BIOS，并提供了更好的启动速度和兼容性。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 每天一个小知识点 </tag>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HW避雷</title>
      <link href="/2023/09/02/HW%E9%81%BF%E9%9B%B7/"/>
      <url>/2023/09/02/HW%E9%81%BF%E9%9B%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="被坑的护网-HW-HVV-国护-经历-amp-套路分享，保持警惕！"><a href="#被坑的护网-HW-HVV-国护-经历-amp-套路分享，保持警惕！" class="headerlink" title="被坑的护网(HW, HVV, 国护)经历&amp;套路分享，保持警惕！"></a>被坑的护网(HW, HVV, 国护)经历&amp;套路分享，保持警惕！</h1><p><strong>本文系转载，原文链接<a href="https://github.com/venkatorne/HVV_Share/blob/main/HW%E9%81%BF%E9%9B%B7.md" title="被坑的护网(HW, HVV, 国护)经历&amp;套路分享，保持警惕！">https://github.com/venkatorne/HVV_Share&#x2F;blob&#x2F;main&#x2F;HW%E9%81%BF%E9%9B%B7.md</a></strong></p><p>欢迎PR，关键信息请打码或变声，注意不要泄露隐私或恶意破坏他人声誉！<br><br>可不分享真实案例，只提供套路，能少一个师傅被坑都是好事! 欢迎Star与分享，让更多人看到!<br><br><strong>为众人抱薪者，不可使其冻毙于风雪。</strong></p><h1 id="承诺安排项目锁人，最终安排少量夜班工作天数，提出疑问视为拒绝项目"><a href="#承诺安排项目锁人，最终安排少量夜班工作天数，提出疑问视为拒绝项目" class="headerlink" title="承诺安排项目锁人，最终安排少量夜班工作天数，提出疑问视为拒绝项目"></a>承诺安排项目锁人，最终安排少量夜班工作天数，提出疑问视为拒绝项目</h1><h2 id="核心套路"><a href="#核心套路" class="headerlink" title="核心套路"></a>核心套路</h2><p>承诺安排项目，但安排不下去（中介和厂商都有可能），卡在护网前一两天安排项目，每人安排少量夜班工作天数，提出疑问（非明确拒绝）则视为不接受项目，无需承担任何责任！</p><h2 id="极端例子（理论上）"><a href="#极端例子（理论上）" class="headerlink" title="极端例子（理论上）"></a>极端例子（理论上）</h2><ol><li>中介或厂商承诺了项目但人安排不下去，护网15天里一人一天夜班，一个人的工作可以直接安排15人，有疑议（甚至不需要表示拒绝）就视为不接受直接释放，快速的继续安排下个人，且责任在于师傅个人。</li><li>同时中介不包差旅，一天工资甚至不够路费，为了不付费上班，只能明确拒绝项目，中介&#x2F;厂商无责，甚至可能追责师傅个人不服从安排导致项目出现问题进行索赔。</li><li>卡在护网前一天安排项目，让师傅没有选择的余地</li></ol><h2 id="中介可能存在的好处"><a href="#中介可能存在的好处" class="headerlink" title="中介可能存在的好处"></a>中介可能存在的好处</h2><ol><li>可接近无责大量锁人到护网前甚至结束</li><li>优先选择价低的师傅去安排，赚更多中介费，剩下的约等于无责释放</li><li>道德混淆：是师傅嫌弃项目不服从安排，而不是中介&#x2F;厂商不安排，立于道德与法律上的不败之地。<br>（如：甚至都没分配到项目&#x2F;项目黄了都没说，你还嫌天数少，活该！）</li></ol><h2 id="真实案例分享"><a href="#真实案例分享" class="headerlink" title="真实案例分享"></a>真实案例分享</h2><h3 id="涉及对象（只为便于理解，某些人请不要自行代入）"><a href="#涉及对象（只为便于理解，某些人请不要自行代入）" class="headerlink" title="涉及对象（只为便于理解，某些人请不要自行代入）"></a>涉及对象（只为便于理解，某些人请不要自行代入）</h3><ul><li>中介 公司：成都宏*****<em><strong>*公司（可能改名）、统一社会信用代码：915</strong></em>Y2R</li><li>拉群微信：春<strong>（Cl0</strong>***）</li><li>对接人 微信：*刘（xsy**<em>*<em><strong>）、名称：</strong>杰、联系方式：</em>*</em>2712</li><li>厂商：某数字公司</li><li>项目经理(疑似)：*志</li></ul><h3 id="核心时间线"><a href="#核心时间线" class="headerlink" title="核心时间线"></a>核心时间线</h3><ul><li>6.25 发布需求：某数字公司第三批招人，提前进场</li><li>6.25 中介面</li><li>6.27 厂商面</li><li>6.28 中介表示没过提前进场，但厂商锁人，承诺优先安排提前进场按80%算工资，正式护网15天</li><li>6.29 11:29 问询不定岗违约责任，中介表示违约责任是厂商定</li><li>6.29 11:39 厂商人员打电话，中间厂商人员承诺定岗</li><li>6.29 15:08 跟中介签订合同</li><li>7.31 跟中介问询项目分配</li><li>8.7 19:53 （开始前两天晚上） 分配项目进群</li><li>8.7 22:10 跟项目经理确认只能排7天或8天夜班</li><li>8.7 22:12 跟中介问询天数，中介表示他去协调</li><li>8.7 22:22 项目经理突然跟我表示：你考虑下其他项目，我这边没这么多空余人天</li><li>8.7 22:23 截图发给中介，中介表示客户把我pass了，换人了（我跟中介与项目经理均未表示拒绝该项目）</li><li>8.7 22:31 中介表示换项目，需要等明天(8.8日)安排</li><li>8.8 整日未回消息</li><li>8.9 中介表示：你被释放了</li><li>8.9 与中介沟通，索要补偿或安排新项目，被拒绝&#x2F;无视</li><li>8.10 中介踢群+拉黑</li></ul><h3 id="相关证据"><a href="#相关证据" class="headerlink" title="相关证据"></a>相关证据</h3><ul><li>6.25 发布需求：某数字公司第三批招人，提前进场<br><br><img src="https://github.com/venkatorne/HVV_Share/assets/141924762/ef25f5ec-7409-4346-be1a-6c72a3d7f45e" width="250"/><br><br><img src="https://github.com/venkatorne/HVV_Share/assets/141924762/a5b43832-97f6-427e-9157-d2c128e2fb64" width="250"/></li><li>6.28 中介表示没过提前进场，但厂商锁人，承诺优先安排提前进场按80%算工资，正式护网15天<br><br><img src="https://github.com/venkatorne/HVV_Share/assets/141924762/8a18e7dd-d3d8-48fd-a974-0b01e6c7e722" width="250"/><br><br><img src="https://github.com/venkatorne/HVV_Share/assets/141924762/fe1ac7d1-7860-470f-b865-25063a6276e6" width="250"/></li><li>6.29 11:29 问询不定岗违约责任，中介表示违约责任是厂商定<br><br><img src="https://github.com/venkatorne/HVV_Share/assets/141924762/b9a81692-deec-4374-ae4f-7d9c1f8f8ced" width="250"/></li><li>6.29 11:39 厂商人员打电话，中间厂商人员承诺定岗<video controls width="250"><source src="https://github.com/venkatorne/HVV_Share/assets/141924762/0658cb4b-ffc9-4d8d-9244-af9ab3b9508d" type="video/mp4" /></video><br>https://github.com/venkatorne/HVV_Share/assets/141924762/0658cb4b-ffc9-4d8d-9244-af9ab3b9508d</li><li>7.31 跟中介问询项目分配<br><br><img src="https://github.com/venkatorne/HVV_Share/assets/141924762/892780b7-4730-4e85-985f-7138aab2736b" width="250"/></li><li>8.7 19:53 （开始前两天晚上） 分配项目进群<br><br><img src="https://github.com/venkatorne/HVV_Share/assets/141924762/51f82c54-4cb4-47c7-b240-613a7d0733ea" width="250"/></li><li>8.7 22:10 跟项目经理确认只能排7天或8天夜班<br><br><img src="https://github.com/venkatorne/HVV_Share/assets/141924762/e83135cc-b750-4910-a8f8-20a223a1c2fb" width="250"/></li><li>8.7 22:12 跟中介问询天数，中介表示他去协调<br><br><img src="https://github.com/venkatorne/HVV_Share/assets/141924762/72a765ff-4617-4179-acc4-258febae754b" width="250"/><br><br><img src="https://github.com/venkatorne/HVV_Share/assets/141924762/e30a0ab0-b2fd-4d0e-8c5f-b369fb290414" width="250"/></li><li>8.7 22:22 项目经理突然跟我表示：你考虑下其他项目，我这边没这么多空余人天<br><br><img src="https://github.com/venkatorne/HVV_Share/assets/141924762/e83135cc-b750-4910-a8f8-20a223a1c2fb" width="250"/></li><li>8.7 22:23 截图发给中介，中介表示客户把我pass了，换人了（我跟中介与项目经理均未表示拒绝该项目）</li><li>8.7 22:31 中介表示换项目，需要等明天(8.8日)安排</li><li>8.8 整日未回消息</li><li>8.9 中介表示：你被释放了<br><br><img src="https://github.com/venkatorne/HVV_Share/assets/141924762/a34ed097-59f2-45e7-afc4-fad00eef8fa5" width="250"/></li><li>8.10 中介踢群+拉黑<br><br><img src="https://github.com/venkatorne/HVV_Share/assets/141924762/acffba09-9aae-46c6-bb76-b7bb18f4115a" width="250"/></li></ul><h3 id="个人感受"><a href="#个人感受" class="headerlink" title="个人感受"></a>个人感受</h3><p>整个心态爆炸，恶心坏了：<br><br>面提前进场，结果没提前进场；<br><br>说优先安排提前进场，护网开始前2天才分配项目；<br><br>说好15天，一开排班7天夜班；<br><br>（提前进场赚钱-&gt;只给赚7天钱）；<br><br>中介表示协调，结果我还没说拒绝项目呢，就直接光速换人；<br><br>（只给赚7天钱-&gt;滚）；<br><br>中介说换项目，结果白等一天（护网开始前1天）；<br><br>护网开始第1天跟我说被释放了；<br><br>（滚-&gt;完美浪费掉你找其他项目的时间）；<br><br>要求补偿&#x2F;安排项目，直接被拒绝甚至无视，最终拉黑。<br><br><br>只能说太<strong>牛逼</strong>了，这种活该财源广进！</p><h2 id="规避手段"><a href="#规避手段" class="headerlink" title="规避手段"></a>规避手段</h2><ol><li>合同约定最少工作天数与保证定岗&#x2F;安排项目</li><li>不要理会任何口头承诺（电话&#x2F;微信聊天），只有写进合同才有效</li><li>约定违约赔偿金额</li><li>不要轻信<code>根据厂商决定</code>&#x2F;<code>按厂商的违约来定</code>的话术，不要轻信厂商承诺</li><li>违约是你跟中介的事，找中介麻烦，中介推脱是厂商责任也要让中介去找厂商，不要自己去找厂商</li><li><strong>避雷特定中介</strong></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> HW </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>成为未来的管理者之前的笔记</title>
      <link href="/2023/09/01/%E6%88%90%E4%B8%BA%E6%9C%AA%E6%9D%A5%E7%9A%84%E7%AE%A1%E7%90%86%E8%80%85%E4%B9%8B%E5%89%8D%E7%9A%84%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/01/%E6%88%90%E4%B8%BA%E6%9C%AA%E6%9D%A5%E7%9A%84%E7%AE%A1%E7%90%86%E8%80%85%E4%B9%8B%E5%89%8D%E7%9A%84%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="成为未来的管理者之前的笔记"><a href="#成为未来的管理者之前的笔记" class="headerlink" title="成为未来的管理者之前的笔记"></a>成为未来的管理者之前的笔记</h1><ul><li><p>不辞退不够强的人，是对其他正在付出的人的不尊重</p></li><li><p>盲目换人从来不解决本质问题</p></li><li><p><strong>有效量化</strong>，降低信息差，是企业运作的核心</p><blockquote><ol><li>搭建适合自己的信息系统<em>（工具：飞书、共享文档）</em></li><li>会议优化（具体执行方法：在开会之前采用协作文档，共同记录信息；会议开始后，所有人静默10min阅读文档，有疑点的地方直接批注，在线交流；之后的会议只讨论批注的问题。目的：压缩会议时长，避免侃大山，减小部门间的信息差）</li></ol></blockquote></li><li><p>人性是经不起挑战的，商业，是切蛋糕的艺术，即<strong>利益分配要合理</strong></p></li><li><p>OKR体系：全称是 Objectives &amp; Key Results，即目标与关键成果。</p><blockquote><ol><li>O是努力的方向和目标，概念意义上的，代表你到底要去哪里</li><li>KR是理想结果，必须可量化，具体到面向个人，代表具体怎么去</li></ol><p>参考链接：<a href="https://zhuanlan.zhihu.com/p/265830351" title="一分钟让你明白OKR考核">https://zhuanlan.zhihu.com/p/265830351</a></p></blockquote></li><li><p>内容创作者不要把自己当回事<em>（对于内容创作者需要知道的行业规则之一：和代理有效沟通“返点”问题）</em></p></li><li><p>一个优秀的视频应当具备的要素：HKRR（H：Happiness，K：Knowledge，R：Resonance，R：Rhythm）</p></li><li><p>电影行业的技巧————<strong>时钟理论</strong>：将视频的时长作为圆的周长，标出0点、3点、6点、9点的内容，如果这四个点没有爆点，那么必须修改，尽可能让刺激点充满整个时钟。目的：<strong>可视化视频节奏</strong></p></li><li><p>不融资的话，团队人数上限不应超过20人</p></li></ul><p><strong>不要留恋成功的一刻，不要躺在功劳簿上享福</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 成长 </tag>
            
            <tag> 管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全成长路径</title>
      <link href="/2023/08/31/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%88%90%E9%95%BF%E8%B7%AF%E5%BE%84/"/>
      <url>/2023/08/31/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%88%90%E9%95%BF%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="网络安全成长路径"><a href="#网络安全成长路径" class="headerlink" title="网络安全成长路径"></a>网络安全成长路径</h1><ol><li>学习“小迪安全-渗透测试”的课程</li><li>考证：软考（中级信息安全工程师）、CISP（CISP-PTE、CISP-PTS）、OSCP</li><li>获取CNVD证书</li><li>SRC平台挖漏洞</li><li>写一个GitHub项目</li><li>搭建一个blog站，记录学习过程与经历，如记一次XXX或记一次XXX到XXX</li><li>参加CTF比赛</li></ol><p>参考链接：<a href="https://blog.csdn.net/m0_67286096/article/details/124020811" title="网络安全攻防五件套，OCSP、CISP-PTE、CISP-PTS、CISP-IRE、CISP-IRS">https://blog.csdn.net/m0_67286096&#x2F;article&#x2F;details&#x2F;124020811</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 成长 </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMD的常见符号及其作用</title>
      <link href="/2023/08/30/CMD%E7%9A%84%E5%B8%B8%E8%A7%81%E7%AC%A6%E5%8F%B7%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/"/>
      <url>/2023/08/30/CMD%E7%9A%84%E5%B8%B8%E8%A7%81%E7%AC%A6%E5%8F%B7%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Q：<code>tasklist | findstr &quot;cmd&quot;</code>此命令中的“|”是什么作用？</p><p>A：在CMD中，”|”（管道符号）的作用是<strong>将前一个命令的输出作为后一个命令的输入</strong>。在给出的命令中，”tasklist”命令用于列出当前正在运行的进程列表，而”findstr”命令用于在输出结果中查找包含指定字符串（在此例中是”cmd”）的行。所以整个命令的作用是列出当前正在运行的进程列表，并在结果中筛选出包含”cmd”字符串的行。</p><h2 id="CMD的常见符号及其作用-："><a href="#CMD的常见符号及其作用-：" class="headerlink" title="CMD的常见符号及其作用 ："></a>CMD的常见符号及其作用 ：</h2><ol><li><strong>“&gt;”：重定向符号。用于将命令的输出重定向到文件</strong>。例如，”dir &gt; output.txt”将”dir”命令的输出保存到名为”output.txt”的文件中。</li><li><strong>“&gt;&gt;”：追加重定向符号。与”&gt;”类似，但是会将命令的输出追加到文件的末尾，而不是覆盖文件内容</strong>。</li><li><strong>“&lt;”：输入重定向符号。用于将文件中的内容作为命令的输入</strong>。例如，”sort &lt; input.txt”将”input.txt”文件中的内容作为”sort”命令的输入进行排序。</li><li><strong>“&amp;”：命令分隔符。用于在一行中运行多个命令</strong>。例如，”command1 &amp; command2”将依次执行”command1”和”command2”。</li><li><strong>“&amp;&amp;”：条件命令分隔符。只有前一个命令成功执行后，才会执行后续的命令</strong>。例如，”command1 &amp;&amp; command2”只有在”command1”成功执行后，才会执行”command2”。</li><li><strong>“||”：条件命令分隔符。只有前一个命令执行失败后，才会执行后续的命令</strong>。例如，”command1 || command2”只有在”command1”执行失败后，才会执行”command2”。</li></ol><p>这些符号可以帮助您在CMD下更有效地执行命令和操作。请注意，有些符号在不同的操作系统或命令行环境中可能会有不同的行为。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 每天一个小知识点 </tag>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不同操作系统对待换行符的不同态度</title>
      <link href="/2023/08/29/%E4%B8%8D%E5%90%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AF%B9%E5%BE%85%E6%8D%A2%E8%A1%8C%E7%AC%A6%E7%9A%84%E4%B8%8D%E5%90%8C%E6%80%81%E5%BA%A6/"/>
      <url>/2023/08/29/%E4%B8%8D%E5%90%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AF%B9%E5%BE%85%E6%8D%A2%E8%A1%8C%E7%AC%A6%E7%9A%84%E4%B8%8D%E5%90%8C%E6%80%81%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>不同操作系统对待换行符的主要区别在于使用的字符不同。</p><p>在Windows操作系统中，换行符由两个字符组成：回车符（CR）和换行符（LF），表示为”\r\n”。</p><p>在Unix&#x2F;Linux操作系统中，换行符只有一个字符：换行符（LF），表示为”\n”。</p><p>在Macintosh操作系统中，换行符只有一个字符：回车符（CR），表示为”\r”。</p><p>这些差异可能会导致在不同操作系统之间传输文本文件时出现格式问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 每天一个小知识点 </tag>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DoS压力测试工具——Slowhttptest</title>
      <link href="/2023/08/28/DoS%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94Slowhttptest/"/>
      <url>/2023/08/28/DoS%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94Slowhttptest/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="DoS压力测试工具——Slowhttptest"><a href="#DoS压力测试工具——Slowhttptest" class="headerlink" title="DoS压力测试工具——Slowhttptest"></a>DoS压力测试工具——Slowhttptest</h1><p>安装命令：<code>apt-get install slowhttptest </code></p><p>使用方法：<code>ulimit -n 8000 &amp;&amp; slowhttptest -c 8000 -X -r 100 -g -o / -w 512 -y 1024 -n 5 -z 32 -k 3 -u http://caichuanqi.cn -p 3</code></p><p>参考链接：<a href="https://caichuanqi.blog.csdn.net/article/details/124744284" title="Kali Linux 安装slowhttptest步骤">https://caichuanqi.blog.csdn.net/article/details/124744284</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云服务器上基于Docker搭建AWVS教程</title>
      <link href="/2023/07/09/AWVS%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>/2023/07/09/AWVS%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="第0步：系统更新"><a href="#第0步：系统更新" class="headerlink" title="第0步：系统更新"></a>第0步：系统更新</h2><p>笔者使用的Linux系统是Debian 11.1 64bit。</p><p>切换到root用户，并且注意全程使用root用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su</span><br></pre></td></tr></table></figure><p>更新软件包列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure><p>进行一次升级</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get upgrade</span><br></pre></td></tr></table></figure><h2 id="第1步：安装Docker"><a href="#第1步：安装Docker" class="headerlink" title="第1步：安装Docker"></a>第1步：安装Docker</h2><p>安装docker和docker-compose</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install docker docker-compose</span><br></pre></td></tr></table></figure><p>安装Docker依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install docker.io</span><br></pre></td></tr></table></figure><p>安装完成后使用如下命令检查安装是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><h2 id="第2步：安装AWVS"><a href="#第2步：安装AWVS" class="headerlink" title="第2步：安装AWVS"></a>第2步：安装AWVS</h2><p>拉取Docker镜像<br><img src="https://s2.loli.net/2023/07/09/ik2gua81tYsdnez.png" alt="docker pull.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull quay.io/hiepnv/acunetix</span><br></pre></td></tr></table></figure><p>创建名为acunetix_data的Docker卷<br><img src="https://s2.loli.net/2023/07/09/TObiGQlW8vo3rf4.png" alt="docker volume create acunetix_data.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create acunetix_data</span><br></pre></td></tr></table></figure><p>运行acunetix_web的容器<br><img src="https://s2.loli.net/2023/07/09/xAPJfi784yjDzX1.png" alt="docker run -d -p.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3443:3443 --restart=unless-stoped --name=acunetix_web quay.io/hiepnv/acunetix</span><br></pre></td></tr></table></figure><h2 id="第3步：开放端口"><a href="#第3步：开放端口" class="headerlink" title="第3步：开放端口"></a>第3步：开放端口</h2><p>云服务器防火墙开放端口，个人使用可以全部开放，如有必要则可以选择只开放3443端口<br><img src="https://s2.loli.net/2023/07/09/g3LKOcMdj9vH6Yp.png" alt="防火墙开放端口.png"></p><h2 id="第4步：测试"><a href="#第4步：测试" class="headerlink" title="第4步：测试"></a>第4步：测试</h2><p><strong>必须通过HTTPS访问3443端口</strong></p><p>默认账户：<a href="mailto:&#x61;&#100;&#x6d;&#105;&#x6e;&#64;&#x61;&#x63;&#117;&#x2e;&#x63;&#111;&#109;">&#x61;&#100;&#x6d;&#105;&#x6e;&#64;&#x61;&#x63;&#117;&#x2e;&#x63;&#111;&#109;</a></p><p>默认密码：Passw0rd!</p>]]></content>
      
      
      
        <tags>
            
            <tag> AWVS </tag>
            
            <tag> 安装教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo框架搭建个人博客教程</title>
      <link href="/2023/06/17/%E5%9F%BA%E4%BA%8EHexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
      <url>/2023/06/17/%E5%9F%BA%E4%BA%8EHexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>本文前置技能：虚拟机的安装与初始化，Linux操作系统基础</strong></p><h2 id="第0步：系统更新"><a href="#第0步：系统更新" class="headerlink" title="第0步：系统更新"></a>第0步：系统更新</h2><p>笔者使用的Linux系统是Ubuntu LTS22.0.4。所有使用Debian内核的Linux都可遵循本教程。</p><p>切换到root用户，并且注意全程使用root用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su</span><br></pre></td></tr></table></figure><p>更新软件包列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure><p>进行一次升级</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get upgrade</span><br></pre></td></tr></table></figure><h2 id="第1步：安装Git"><a href="#第1步：安装Git" class="headerlink" title="第1步：安装Git"></a>第1步：安装Git</h2><p>注意使用root用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install git</span><br></pre></td></tr></table></figure><p>安装完成后使用如下命令检查安装是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><h2 id="第2步：安装Nodejs"><a href="#第2步：安装Nodejs" class="headerlink" title="第2步：安装Nodejs"></a>第2步：安装Nodejs</h2><p>注意使用root用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install node</span><br><span class="line">apt-get install npm</span><br></pre></td></tr></table></figure><p>安装完成后使用如下命令检查安装是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h2 id="第3步：安装及初始化Hexo"><a href="#第3步：安装及初始化Hexo" class="headerlink" title="第3步：安装及初始化Hexo"></a>第3步：安装及初始化Hexo</h2><p>注意使用root用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完成后使用如下命令检查安装是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>初始化Hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>在终端中右键打开链接<a href="http://localhost:4000/">http://localhost:4000/</a>打开Hexo生成的默认网页<br><img src="https://s2.loli.net/2023/06/17/TWuc5B1r8a2SjVL.png" alt="localhost:4000"></p><p>未完待续…</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安装教程 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/06/15/hello-world/"/>
      <url>/2023/06/15/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
